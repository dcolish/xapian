How to build the bindings:
==========================

Running "make" will "install" a JNI glue shared library into a "built"
subdirectory.  The jar file is built into the "built" subdirectory too.

You can copy these two files into your java installation, or just use them
in-place.

How to compile the examples:
============================

  cd java
  javac -classpath built/xapian_jni.jar:. org/xapian/examples/SimpleIndex.java
  javac -classpath built/xapian_jni.jar:. org/xapian/examples/SimpleSearch.java

How to run the examples:
========================

To run the examples, you need to give Java a special system-property named
"java.library.path".  The value of this property is the path of the directory
where the libxapian_jni.so library is located.

 java -Djava.library.path=built -classpath built/xapian_jni.jar:. \
      org.xapian.examples.SimpleIndex ./test.db index words like java

 java -Djava.library.path=built -classpath built/xapian_jni.jar:. \
      org.xapian.examples.SimpleSearch ./test.db index words like java

(Alternatively, you can set the LD_LIBRARY_PATH environment variable and skip
the -Djava.library.path setting for java.)

The java bindings have been tested with Debian packages of GCJ 3.4 and GIJ 3.4.
They should work with any java toolchain with suitable JNI support - please
report success stories or any problems to the development mailing list:
xapian-devel@lists.xapian.org

TODO list:
==========

The majority of the C++ API is wrapped, with a few exceptions still to be done:

* Wrap new QueryParser API.

* Wrap new method ESet::back().

* Wrap the new optional third parameter to Enquire::set_sorting().

* [DONE] Wrap operator-- as prev() for MSetIterator and ESetIterator.

* [DONE] Added constructors to Database and WritableDatabase which fulfil the
  role that the Auto::open() factory functions currently do.  Auto::open() is
  now deprecated.

* Third (optional) argument to Document::add_posting() isn't wrapped.

* Wrap Xapian::Weight and standard subclasses.

* Allow user derived weight classes to be implemented in Java (less important).
