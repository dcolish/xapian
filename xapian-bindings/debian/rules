#!/usr/bin/make -f
#
# Copyright (C) 2004,2005,2006 Lemur Consulting Ltd
# Copyright (C) 2006 Olly Betts
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
# USA

# Component we're building packages for.  If not explicitly specified, default
# to that named in debian/component and if that's not given, use "unstable".
COMPONENT ?= $(shell cat debian/component 2>/dev/null||echo unstable)

ifeq ($(COMPONENT), unstable)

# The python versions to build for:
PYTHON_VERSIONS := $(shell pyversions -r debian/control)
ifeq ($(PYTHON_VERSIONS), )
PYTHON_VERSIONS := python2.3 python2.4
endif
# python >= 2.3.5-7 is required for the pyversions command.
BUILD_DEPS := debhelper (>= 5.0.37.1), python (>= 2.3.5-7), python-central (>= 0.4.10),

else

# The python versions to build for:
ifeq ($(COMPONENT), dapper)
# Dapper doesn't have Python 2.1.
PYTHON_VERSIONS := 2.2 2.3 2.4
else
PYTHON_VERSIONS := 2.1 2.2 2.3 2.4
endif
# We need python itself for dh_python to work.
PYTHON_VERSIONS := $(PYTHON_VERSIONS:%=python%)
BUILD_DEPS := debhelper (>= 4.1.67), python,

endif

# The PHP versions to build for:
ifeq ($(COMPONENT), stable)
# Debian stable doesn't have PHP5.
PHP_VERSIONS := 4
else
PHP_VERSIONS := 4 5
endif

# The .py module for Python 2.1 isn't the same as that for 2.2 and higher,
# but python-central doesn't exists where we have Python 2.1 so that's not
# a worry for us.  However we'll need this if we ever generate different
# .py modules for different supported python versions.
#export DH_PYCENTRAL=nomove

export DH_OPTIONS

buildtargets := all

export DEB_HOST_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)

ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
	confflags += --build $(DEB_HOST_GNU_TYPE)
	buildtargets += check
else
	confflags += --build $(DEB_BUILD_GNU_TYPE) --host $(DEB_HOST_GNU_TYPE)
endif

ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	confflags += CFLAGS="-O0" CXXFLAGS="-O0"
else
	confflags += CFLAGS="-O2" CXXFLAGS="-O2"
endif

# Build depends for Python.
# Once the current (2006-06-15) unstable has spread everywhere, then
# we can just use python-all-dev here instead.
BUILD_DEPS += $(PYTHON_VERSIONS:%=%-dev,)
# For use in Conflicts: and Replaces:
PYTHON_OLD_PACKAGES := $(shell echo "$(PYTHON_VERSIONS:%=%-xapian (<< 0.9.6-3$),)"|sed 's/,$$//')

# Build depends for PHP.
# We only need phpN-cli so we can run "make check" on the bindings.
# Only the first % in the replacement part is substituted, so we need
# to do this in two goes.
BUILD_DEPS += $(PHP_VERSIONS:%=php%-dev,)
BUILD_DEPS += $(PHP_VERSIONS:%=php%-cli,)

# Build depends for Tcl.  We use Tcl's stubs mechanism, so the built
# bindings will work with any Tcl version from 8.0.6 upwards, whichever
# version they were built against.
#
# Currently all the distributions which we want to build packages for have
# tcl8.4-dev, so just build against that.
BUILD_DEPS += tcl8.4-dev,# NB Trailing ',' required here!
TCLSH=/usr/bin/tclsh8.4

# Build depends for Ruby.
BUILD_DEPS += ruby1.8-dev, ruby1.8,# NB Trailing ',' required here!
RUBY=/usr/bin/ruby1.8

commonconfflags := \
	$(confflags) \
	--prefix=/usr \
	--mandir=\$${prefix}/share/man \
	--infodir=\$${prefix}/share/info \
	--sysconfdir=/etc

# With GCC3 and later this won't make a huge difference, but it'll save
# a bit of time and diskspace while building.
commonconfflags += --disable-dependency-tracking

maint: debian/control

maintclean: clean
	rm -f debian/control

debian/control: debian/rules debian/control.in
	rm -f debian/control.tmp
	sed -e "s/@BUILD_DEPS@/$(BUILD_DEPS)/g" \
	    -e "s/@PYTHON_OLD_PACKAGES@/$(PYTHON_OLD_PACKAGES)/g" \
	    < debian/control.in > debian/control.tmp
	for v in $(PHP_VERSIONS); do \
	    sed "s/@PHP_VERSION@/$$v/g" debian/control-php.in ;\
	done >> debian/control.tmp
	mv debian/control.tmp debian/control

configure: debian/configure-stamp
debian/configure-stamp:
	dh_testdir

	# Use the latest config.sub and config.guess from the autotools-dev
	# package.
	rm -f config.sub config.guess
	ln -s /usr/share/misc/config.sub config.sub
	ln -s /usr/share/misc/config.guess config.guess

	for python in $(PYTHON_VERSIONS); do \
	    set -e; \
	    mkdir -p build-$$python; \
	    cd build-$$python; \
	    ../configure $(commonconfflags) --with-python \
		PYTHON=/usr/bin/$$python; \
	    cd ..; \
	done

	for v in $(PHP_VERSIONS); do \
	    c=/usr/bin/php-config$$v; \
	    if test -x $$c ; then \
		set -e; \
		mkdir -p build-php$$v; \
		cd build-php$$v; \
		../configure $(commonconfflags) --with-php PHP_CONFIG=$$c; \
		cd ..; \
	    fi \
	done

	mkdir -p build-tcl
	cd build-tcl && ../configure $(commonconfflags) --with-tcl TCLSH=$(TCLSH)

	mkdir -p build-ruby
	cd build-ruby && ../configure $(commonconfflags) --with-ruby RUBY=$(RUBY)

	touch $@

build: configure debian/build-stamp
debian/build-stamp:
	dh_testdir
	for python in $(PYTHON_VERSIONS); do \
	    set -e; \
	    $(MAKE) -C build-$$python $(buildtargets) ; \
	done
	for v in $(PHP_VERSIONS); do \
	    if test -x /usr/bin/php-config$$v ; then \
		set -e; \
		$(MAKE) -C build-php$$v $(buildtargets) ; \
	    fi \
	done
	$(MAKE) -C build-tcl $(buildtargets)
	$(MAKE) -C build-ruby $(buildtargets) 
	touch $@

install: DH_OPTIONS=
install: build
	dh_testdir
	dh_testroot
	dh_clean -k
	dh_installdirs

	# Install the files under 'debian/tmp'.
	for python in $(PYTHON_VERSIONS); do \
	    set -e; \
	    $(MAKE) -C build-$$python DESTDIR=$(CURDIR)/debian/tmp install; \
	done

	for v in $(PHP_VERSIONS); do \
	    c=/usr/bin/php-config$$v; \
	    if test -x $$c ; then \
		set -e; \
		$(MAKE) -C build-php$$v DESTDIR=$(CURDIR)/debian/tmp install; \
	    fi \
	done

	$(MAKE) -C build-tcl DESTDIR=$(CURDIR)/debian/tmp install

	$(MAKE) -C build-ruby DESTDIR=$(CURDIR)/debian/tmp install

	# Reads the '*.install' files to decide where to install everything.
	dh_install --sourcedir=debian/tmp --fail-missing --exclude=.pyc

binary: binary-arch
binary-arch: DH_OPTIONS=-a
binary-arch: build install
	dh_testdir
	dh_testroot
	dh_installdocs
	dh_installexamples
	dh_installmenu
	dh_installman
	dh_installchangelogs ChangeLog
	dh_strip
	dh_link
	dh_compress
	dh_fixperms
	dh_makeshlibs
	# The -x test allows the same rules file to be used for backports.
	# Once python-central is in all the debian and ubuntu versions we
	# want to build packages for, this can go.
	[ ! -x /usr/bin/dh_pycentral ] || dh_pycentral
	dh_python
	dh_installdeb
	dh_shlibdeps

	# php-config4 in sarge doesn't understand --phpapi and we want to
	# support backporting so use --extension-dir and remove the path
	# with sed.
	for v in $(PHP_VERSIONS); do \
	    c=/usr/bin/php-config$$v; \
	    if test -x $$c ; then \
		set -e; \
		echo "php$$v:Depends=phpapi-`$$c --extension-dir|sed 's,.*/,,'`, php$$v-common" >> debian/php$$v-xapian.substvars; \
	    fi \
	done

	# sarge onwards don't have tcl8.2 or earlier, though we would work with
	# 8.2 and 8.1 if they were packaged.
	echo "tcl:Depends=tcl8.4|tcl8.3" >> debian/tclxapian.substvars

	echo "ruby:Depends=libruby1.8" >> debian/libxapian-ruby1.8.substvars

	dh_gencontrol
	dh_md5sums
	dh_builddeb

clean:
	dh_testdir
	dh_testroot
	for python in $(PYTHON_VERSIONS); do \
	    set -e; \
	    rm -rf build-$$python; \
	done
	for v in $(PHP_VERSIONS); do \
	    set -e; \
	    rm -rf build-php$$v; \
	done
	rm -rf build-tcl build-ruby
	debconf-updatepo
	rm -f config.sub config.guess
	dh_clean
	rm -f debian/build-stamp debian/configure-stamp

.PHONY: maint maintclean configure build install binary binary-arch clean
