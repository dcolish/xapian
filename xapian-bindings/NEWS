Xapian-bindings 0.8.4 (2004-12-01):

General:

* README: Improved a bit.

* Instead of requiring the user to have a really recent SWIG installed, ship
  the files SWIG generates.  Disable all the SWIG rules unless configure is run
  with --enable-maintainer-mode to make sure they aren't triggered accidentally
  by make with dodgy VPATH or anything else.

* configure: Require SWIG 1.3.23 or higher (for optional arguments in C#),
  but note that SWIG is no longer needed if you just want to installing the
  bindings.

* It turns out that we do need to wrap MSet::MSet() (wrapping removed in 0.8.2)
  (for example, simpleexpand.py needs it).

* In the Query constructor which takes a vector of terms, only call set_window
  if window is non-zero.  Otherwise things go wrong if we're passed an empty
  vector.

* Second argument to Document::add_posting() isn't optional, but xapian.i
  indicated that it was.

* xapian.i: Wrapped Xapian::Weight and standard subclasses.  The class is
  marked as needing a director for Python, so you should be able to create your
  own Weight subclass in Python, but we've not managed to get this to work
  yet...

* xapian.i: %name is deprecated, so use %rename instead.  This also works
  around a bug in SWIG 1.3.23.

* configure: Removed pointless probe for a C compiler - everything we compile
  is C++.

* configure: Reinstated the check that the bindings version matches the version
  of the xapian library.  It was added in 0.8.2, but accidentally removed in
  0.8.3.

* Use newly added option `xapian-config --swigflags` which (a) avoids always
  passing -I/usr/include which could cause problems if we're using a Xapian
  install not in /usr and there's another one in /usr and (b) avoids problems
  if `xapian-config --cxxflags` contains flags other than -I<something>.

CSharp:

* Richard Boulton has put together bindings for C#.  These build successfully
  with the Mono tools, but the smoketest currently fails.  Unclear if the
  problem is the bindings or the smoketest code.

Guile:

* The guile bindings now build successfully, so we've enabled the guile
  detection machinery in configure.  They're untested though (we don't
  know guile!) so success or failure reports are encouraged!

PHP4:

* Mention the example scripts near the start of the documentation, not right at
  the end.

* Remove documentation explicitly saying how we wrap Xapian::QueryParser and
  Xapian::Stem since we wrap them exactly as we wrap everything else we don't
  mention! 

Python:

* Make overloaded Query(Query::op, vector<string>*, termpos) constructor
  work in Python.

* Changed examples to use the newly wrapped Query from list of terms ctor.

* Mention the example scripts near the start of the documentation, not right at
  the end.

* python/Makefile.am: Added xapian_wrap.h as a target for the rule which runs
  SWIG.

* Remove documentation explicitly saying how we wrap Xapian::QueryParser and
  Xapian::Stem since we wrap them exactly as we wrap everything else we don't
  mention! 

* Mention simpleexpand example in documentation.

* Examples now report messages for Xapian exceptions.

* Removed MAX_PROB_TERM_LENGTH from example scripts which don't use it.

* Make the example MatchDecider exclude documents matching a value, rather than
  a term.  The latter is a very inefficient way to do what AND_NOT does, and we
  don't want examples to mislead like that.

* python/docs/bindings.html: Note that you can construct a query
  from a list of terms, even if you can't from a list of queries.
  Add HTML links to the examples.

* simpleindex.py: Trim spaces from the start as well as from the end of each
  line.  Simplify the loop slightly.

Tcl:

* Wrap in a tcl8 namespace "Xapian".

* Added a smoketest.

* Translated simpleindex and simplesearch into Tcl.

* Set the Tcl package version.

* Create pkgIndex.tcl so the package can be loaded in the usual Tcl way.

* Install in "xapian<VERSION>" directory in the conventional Tcl way.

* Added documentation for tcl8 bindings.

* Use the TCL_STUBS mechanism so that compiled extensions are portable between
  different versions of Tcl.  This needs Tcl 8.1, so bump the required Tcl
  version (was 8.0).

* configure.ac: Noted that the bindings can easily be compiled for use with
  Tcl 8.0, in case anybody needs that for some reason.

Xapian-bindings 0.8.3 (2004-09-20):

General:

* Fixed mismatching versions of libtool used to produce configure and
  ltmain.sh.  The obvious symptom was ".so" missing from the shared object
  names.

* RPM spec file contributed by Fabrice Colin.  Currently this packages Python,
  PHP4, and Tcl bindings.

Java:

* Pass -classpath to javac to fix build problems.

* Make sure errors subdirectory is built before we try to build the jar file.

* Fixed "make install" to not give libtool error.

PHP4:

* Include PHP4 documentation and exmples in the tarball.

* Reverted "Use special SWIG PHP ldflags when linking the PHP glue library."
  change from 0.8.2 - it turns out we only need to pass these flags if we use
  swig's -noruntime option (which we don't do).

Python:

* Use swig's -modern switch for Python 2.2 and up - it gives cleaner, leaner,
  faster Python wrapper code.

Tcl:

* Don't install xapian.la.

* Improved configure check for tcl.h to work with Fedora Core 2.

Xapian-bindings 0.8.2 (2004-09-13):

General:

* Added wrappers for recently added methods: ESet::back() and
  Database::get_lastdocid(), and wrap the new optional third parameter
  to Enquire::set_sorting().

* No longer wrap MSet::MSet() - it's not of use in scripting languages.

* Wrap operator-- as prev() for MSetIterator and ESetIterator.

* Wrap Quartz, InMemory, and Remote database factory functions as
  quartz_open(), inmemory_open(), and remote_open().

* Added missing wrappers for static Stem::get_available_languages() and
  Stem::get_description().

* Wrap renamed method Query::empty() (was Query::is_empty()).

* Remove renaming of other empty() methods to is_empty() (but keep is_empty()
  as an alias for now).

* Require autoconf 2.59 and automake 1.8.5.

* configure: Added check that the bindings version matches the version of
  the xapian library.

* configure: Check if we're using GCC and only pass GCC specific warning
  control options if we are.

* configure: When running with GCC, also pass -Wno-uninitialized so the
  SWIG glue builds without warnings.

* README: Updated list of languages which SWIG supports.

PHP4:

* Document that the 2 argument form of Xapian::Auto::open() for opening a
  writable database is wrapped as open_writable() (bug #32).

* Include Xapian version in output from phpinfo().

* Build the SWIG glue library like we build the others rather than using
  SWIG's -phpfull option.  This avoids problems with newer automake versions
  and means we can build against an uninstalled xapian library.

* Corrected documentation to refer to Xapian::DB_* not Xapian::Auto::DB_*.
  Fixed documentation of how Xapian::Query::OP_* are wrapped.

* Use special SWIG PHP ldflags when linking the PHP glue library.

* simplesearch.py now works with multi-term queries.

* Added documentation on how to install the PHP4 bindings.

* Added a simple testcase to at least ensure the PHP4 bindings can be
  initialised and some simple operations work.

Python:

* configure: Now checks for Python >= 2.1 which we need for __cmp__ and __eq__.

* Don't install _xapian.la and _xapian.a.

* Byte compile xapian.py to xapian.pyc and install it.

* Suppress SWIG warning about MatchDecider::operator() director discarding
  const.

* "make clean" no longer leaves "xapian_wrap.h" behind.

* Added a simple testcase to at least ensure the python bindings can be
  initialised and some simple operations work.

Tcl8:

* configure: Disable building tcl8 bindings if the headers are missing
  (probably because the tcl8.X-dev package isn't installed).

Xapian-bindings 0.8.1 (2004-06-30):

General:

* configure: Require SWIG 1.3.20 or higher (previously was 1.3.14).

* Add "-I/usr/include" to the swig line.  This is needed when xapian is
  installed with a prefix of /usr, since "xapian-config --cxxflags" carefully
  doesn't emit -I/usr/include in this situation (because it causes problems
  with some GCC versions).

* Fixed the %exception handler to cover all the exceptions Xapian can throw,
  not just a subset.

Java:

* Removed wrappers for unused error classes which have been pruned from C++.

* Make finalize() methods of Database and WritableDatabase public so they can
  be called from by the user.

* Document Doccument.add_term_nopos() as deprecated.

PHP4:

* Make sure that PHP bindings build a module which exports get_module() so PHP
  is able to load it.

* Configure now checks that phpize can actually be run, rather than just that
  it's executable (test -x isn't portable anyhow).

* Added basic documentation and examples to PHP4 bindings.

* Rename overloaded methods and constructors.

* Add simple access to the prefixes map in QueryParser.

* Correct simpleindex ports to never generate empty termnames.

Python:

* configure: Use $PYTHON instead of python when running python to determine
  library and include paths and version number.

* Actually ship python examples and documentation.

Xapian-bindings 0.8.0 (2004-04-20):

* README: Started collecting information on supporting Xapian from even
  more languages.

* Added configure tests to enable bindings only where the necessary tools
  are installed and have a supported version.  ./configure --without-LANGUAGE
  allows particular languages to be forcibly disabled.

* Added Xapian::Document::add_term() - the new name for add_term_nopos().

* A couple of Xapian::Query constructors weren't being wrapped - fixed.

* Added Eric B. Ridge's JNI bindings for Java.  The JNI bindings themselves
  have been well tested, but integration with the xapian-bindings configure
  system hasn't been tested at all - please alert us to any problems.

* Xapian can now be used from TCL.

* Python: MSet now provides a Python iterator.

* Python: OMMSET_* and OMESET_* renamed to MSET_* and ESET_*.

* Python: enable directors for MatchDecider, to allow subclassing in Python.

* Python: Added basic documentation, and some examples.
