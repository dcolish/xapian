\C{intro} QueryServer

\S0{whatfor} What is QueryServer for?

QueryServer is intended to provide a simple way to use Xapian from a wide
variety of scripting languages, without having to implement (or compile)
special extensions for that language.  As long as the language supports use of
UNIX sockets, a simple communication layer can be implemented without the need
to compile extension modules for the language.

QueryServer could easily be extended to work using TCP sockets, or any similar
messaging system, for platforms in which UNIX sockets are not available.

The implementation of the QueryServer aims mainly for simplicity, rather than
maximum possible performance.  However, it should be perfectly suitable for low
to medium load environments.

\C{server} Running the server

\S0{compiling} Compiling the server

QueryServer uses the same autotools setup that the rest of Xapian uses.  This means that compilation is a simple matter of running:

\c $ ./configure
\e   bbbbbbbbbbb
\c $ make
\e   bbbb
\c $ make install
\e   bbbbbbbbbbbb

You may wish to supply additional parameters to the configure statement.  In
particular the \c{\-\-prefix} parameter is useful to determine where to install
the server.

\S0{running} Invoking the server

The server is invoked with two parameters.

\b  The first parameter gives the location of a socket that the queryserver
    will use to listen for requests.  Note that this is a location in the
    filesystem: there must not be any file in the given location when the
    queryserver is started, and the queryserver will remove the socket when it
    exits.

\lcont{
    Note also that the socket may be created with global read and write
    access.  You should read the documentation of your operating system
    to determine how access to a UNIX socket is controlled.  For example,
    on Linux, permissions on the directory the socket is in may be used to
    control access to the socket, but this is not true on many BSD-derived
    systems.

    The queryserver itself performs \e{no} authentication whatsoever.
}

\b  The second parameter gives the location of a directory holding the Xapian
    databases to be searched.  No databases outside the directory, or in
    subdirectories of this directory, will be accessible via the queryserver.
    However, symbolic links inside the directory will be followed, whether
    they point elsewhere in the directory, or elsewhere on the filesystem.

For example the following command runs the queryserver, listening to the socket
/tmp/socket, and allowing access to databases stored in the directory
/var/lib/omega/data/

\c $ ./queryserver /tmp/socket /var/lib/omega/data
\e   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

\S1{stopping} Stopping the server

The queryserver should be stopped by sending it a \c{SIG_TERM} signal.  For
this reason, it is desirable to keep track of the process ID of the server.
Many systems provide tools to assist with this task - for example, the
\c{start-stop-daemon} tool on Debian systems.

\S0{howworks} How the server works

Once invoked, the server starts listening to the socket for connections from
clients.  When a client connects, the server immediately forks a new process
to deal with the request, and then continues listening for new connections.
This allows the server to deal with many requests simultaneously.

Note that there is no upper limit on the number of concurrent requests other
than any limits imposed by the operating systems on the number of child
processes of the server.  This means that the server may not deal with extreme
loads very well.  This design of server is suitable for low to medium loads
only.

Also, note that the server does not maintain a pool of open databases, and
share them between the subprocesses dealing with requests.  Instead, each new
request causes the appropriate database to be opened, used, and then closed at
the end of the request.  This is less efficient than if database connections
were to be cached in some way, but is extremely simple to implement, and does
have the small benefit that there is no need to deal with
DatabaseModifiedErrors (assuming that the database modification transactions
take longer than the maximum time taken to execute a query).

\C{clients} Clients

\S0{client-php} PHP4 client


\A{protocol} Communications protocol

The communications protocol is intentionally kept extremely simple.  A
conversation consists of exactly two messages, and is always initiated by the
client.

\S0{protocol-request} Client request

\S0{protocol-response} Server response

