                            Xapian QueryServer
                            ==================

Chapter 1: QueryServer
----------------------

   1.1 What is QueryServer for?

       QueryServer is intended to provide a simple way to use Xapian from
       a wide variety of scripting languages, without having to implement
       (or compile) special extensions for that language. As long as the
       language supports use of UNIX sockets, a simple communication layer
       can be implemented without the need to compile extension modules for
       the language.

       QueryServer could easily be extended to work using TCP sockets, or
       any similar messaging system, for platforms in which UNIX sockets
       are not available.

       The implementation of the QueryServer aims mainly for simplicity,
       rather than maximum possible performance. However, it should be
       perfectly suitable for low to medium load environments.

Chapter 2: Running the server
-----------------------------

   2.1 Compiling the server

       QueryServer uses the same autotools setup that the rest of Xapian
       uses. This means that compilation is a simple matter of running:

         $ ./configure
         $ make
         $ make install

       You may wish to supply additional parameters to the configure
       statement. In particular the `--prefix' parameter is useful to
       determine where to install the server.

   2.2 Invoking the server

       The server is invoked with two parameters.

        -  The first parameter gives the location of a socket that the
           queryserver will use to listen for requests. Note that this is
           a location in the filesystem: there must not be any file in
           the given location when the queryserver is started, and the
           queryserver will remove the socket when it exits.

           Note also that the socket may be created with global read
           and write access. You should read the documentation of your
           operating system to determine how access to a UNIX socket is
           controlled. For example, on Linux, permissions on the directory
           the socket is in may be used to control access to the socket,
           but this is not true on many BSD-derived systems.

           The queryserver itself performs _no_ authentication whatsoever.

        -  The second parameter gives the location of a directory holding
           the Xapian databases to be searched. No databases outside the
           directory, or in subdirectories of this directory, will be
           accessible via the queryserver. However, symbolic links inside
           the directory will be followed, whether they point elsewhere in
           the directory, or elsewhere on the filesystem.

       For example the following command runs the queryserver, listening to
       the socket /tmp/socket, and allowing access to databases stored in
       the directory /var/lib/omega/data/

         $ ./queryserver /tmp/socket /var/lib/omega/data

 2.2.1 Stopping the server

       The queryserver should be stopped by sending it a `SIG_TERM' signal.
       For this reason, it is desirable to keep track of the process ID of
       the server. Many systems provide tools to assist with this task -
       for example, the `start-stop-daemon' tool on Debian systems.

   2.3 How the server works

       Once invoked, the server starts listening to the socket for
       connections from clients. When a client connects, the server
       immediately forks a new process to deal with the request, and then
       continues listening for new connections. This allows the server to
       deal with many requests simultaneously.

       Note that there is no upper limit on the number of concurrent
       requests other than any limits imposed by the operating systems on
       the number of child processes of the server. This means that the
       server may not deal with extreme loads very well. This design of
       server is suitable for low to medium loads only.

       Also, note that the server does not maintain a pool of open
       databases, and share them between the subprocesses dealing with
       requests. Instead, each new request causes the appropriate database
       to be opened, used, and then closed at the end of the request.
       This is less efficient than if database connections were to be
       cached in some way, but is extremely simple to implement, and
       does have the small benefit that there is no need to deal with
       DatabaseModifiedErrors (assuming that the database modification
       transactions take longer than the maximum time taken to execute a
       query).

Chapter 3: Clients
------------------

       Currently only a PHP4 client class is available. However, it
       should be a simple task to write a client for most other scripting
       languages.

   3.1 PHP4 client

       The PHP4 client consists of a single PHP file,
       `xapian-queryclient.php', which should be included from your PHP
       project. The file defines three classes which are used to compose a
       query, and retrieve the results.

 3.1.1 The Enquiry class

       The `Enquiry' class is used to build up a query, and then to send
       that query to the server and retrieve the results.

       `Enquiry::Enquiry($socket)'

           This is the constructor. It takes one parameter, which
           is the location of the socket to be used to talk to
           `xapian-queryserver'.

       `Enquiry::setDbName($dbname)'

           FIXME

       `Enquiry::setQuery($query)'

           FIXME

       `Enquiry::addFilter($prefix, $filter)'

           FIXME

       `Enquiry::perform($firstdoc, $maxitems)'

           FIXME

       `Enquiry::perform($firstdoc, $maxitems)'

           FIXME

 3.1.2 The Result class

       The `Result' class, returned by the Enquiry::perform() method, holds
       a set of results of a query, together with some statistics about the
       results.

       Note that due to optimisations and shortcuts performed by Xapian,
       the exact number of documents matched by the query may not be known,
       so Xapian provides an estimate of the number of matching documents,
       together with lower and upper bounds on the number of matching
       documents. The estimate will always lie within the bounds. If and
       only if the upper bound is equal to the lower bound, the estimate
       may be relied on to be correct.

       `Result::firstitem'

           This member holds the rank of the first hit returned.

       `Result::items'

           This member holds the number of hits stored in the result
           object.

       `Result::matches_lower_bound'

           This member holds a lower bound on the number of documents
           matched by the query.

       `Result::matches_estimated'

           This member holds an estimate of the number of documents matched
           by the query.

       `Result::matches_upper_bound'

           This member holds an upper bound on the number of documents
           matched by the query.

       `Result::hits'

           This member is an array of `Hit' objects (see section 3.1.3).
           Note that this array is keyed on the rank of the hits - so if:

             $result\_=\_Enquire::perform(5,10)

           was called to generate the `$result' object (and there
           were sufficient matching documents), `$result->hits[5]' to
           `$result->hits[14]' would be valid.

 3.1.3 The Hit class

       The `Hit' class holds an individual document resulting from a query.

       `Hit::rank'

           This member holds the rank of the hit. This starts at 0: _ie_,
           the top hit resulting from a query has a rank of 0.

       `Hit::percent'

           This member holds the percentage score of the hit.

       `Hit::data'

           This member is an object holding the data stored in the Xapian
           database for the hit. The data is assumed to have been held in
           the format generated by the `scriptindex', or `omindex' indexers
           associated with the `omega' Xapian application. This format is a
           set of lines, one per field, of the form:

             fieldname=fielddata

 3.1.4 Example

       The following example connects to a socket at
       `/tmp/xapian-queryserver-socket', runs the query `query' on the
       database called `db', retrieves the top 10 results, and displays
       the rank and percentage score of each result. In addition, the data
       stored in each document is assumed to be of the format:

         type=<type>
         id=<id>

       and this data is parsed and displayed.

         <?
         include('xapian-queryclient.php');
         
         $enquiry = new Enquiry('/tmp/xapian-queryserver-socket');
         
         $enquiry->setDbName('db');
         $enquiry->setQuery('query');
         $result = $enquiry->perform(0, 10);
         
         if ($result != null) {
         
           print "First item returned is of rank: " .
                   $result->firstitem . " <br>\n";
           print "Number of items returned is: " .
                   $result->items . " <br>\n";
           print "There were at least: " .
                   $result->matches_lower_bound . " hits.<br>\n";
           print "There were approximately: " .
                   $result->matches_estimated . " hits.<br>\n";
           print "There were no more than: " .
                   $result->matches_upper_bound . " hits.<br>\n";
         
           foreach ($result->hits as $hit) {
             print "Hit at rank " . $hit->rank .
                   ", score " . $hit->percent . "%" .
                   " is " . $hit->data->type . "_" . $hit->data->id .
                   "<br>\n";
           }
         }
         ?>

Appendix A: Communications protocol
-----------------------------------

       The communications protocol is intentionally kept extremely simple.
       A conversation consists of exactly two messages, and is always
       initiated by the client.

   A.1 Client request

   A.2 Server response

Appendix B: man pages
---------------------

   B.1 man page for `xapian-queryserver'

 B.1.1 NAME

       `xapian-queryserver' - Simple socket based query server for Xapian

 B.1.2 SYNOPSIS

         ./queryserver socketpath data_directory

 B.1.3 DESCRIPTION

       xapian-queryserver listens to a UNIX socket for queries, performs
       the queries, and sends the results back over the socket.

       The server is invoked with two parameters.

       _socketpath_

           The first parameter gives the location of a socket that the
           queryserver will use to listen for requests.

       _data_directory_

           The second parameter gives the location of a directory holding
           the Xapian databases to be searched.

       For example the following command runs the queryserver, listening to
       the socket /tmp/socket, and allowing access to databases stored in
       the directory /var/lib/omega/data/

         ./queryserver /tmp/socket /var/lib/omega/data

 B.1.4 AUTHOR

       Written by Richard Boulton.

 B.1.5 REPORTING BUGS

       Please report bugs using Xapian's online bugzilla system at
       http://www.xapian.org/bugs.php

 B.1.6 COPYRIGHT

       Copyright (C) 2004 Lemur Consulting Ltd.

       This is free software; see the source for copying conditions. There
       is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
       PARTICULAR PURPOSE.

 B.1.7 SEE ALSO

       For more information on xapian-queryserver see the full manual,
       which is available in a variety of formats.

