#!/bin/sh
# bootstrap a xapian source tree obtained from SVN to produce a tree like
# you'd get from unpacking the results of "make dist"
#
# Copyright (C) 2002,2003,2004,2005,2006,2007,2008 Olly Betts
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
# USA

if [ "$1" = "--help" ] ; then
  echo "$0 [--without-autotools|--clean]"
  exit 0
fi

trap 'echo "Bootstrap failed"' EXIT
set -e

lazy_build() {
  package=$1
  basename=$package-$2
  ext=$3
  checksum=$4
  tarball=$basename.$ext
  stamp=$package.stamp

  # Download the tarball if required.
  if [ ! -f "$tarball" ] ; then
    wget "ftp://ftp.gnu.org/gnu/$package/$tarball"
  fi

  if [ -f "$stamp" ] ; then
    find_stdout=`find "$stamp" -newer "$tarball" -print`
  else
    find_stdout=
  fi

  if [ -z "$find_stdout" ] ; then
    # Verify the tarball's checksum before building it.
    echo "$checksum  $tarball"|sha1sum -c

    for f in "$package"-* ; do
      [ "$f" = "$tarball" ] || rm -rf "$f"
    done

    case $ext in
    tar.bz2)
      bzip2 -dc "$tarball"| tar xf - ;;
    *)
      gzip -dc "$tarball"| tar xf - ;;
    esac

    cd "$basename"
    ./configure --prefix="$instdir"
    make
    make install
    cd ..
    rm -rf "$basename"

    touch "$stamp"
  fi
}

curdir=`pwd`

# cd to srcdir if we aren't already there.
srcdir=`echo "$0"|sed 's!/*[^/]*$!!'`
case $srcdir in
  ""|.)
    srcdir=. ;;
  *)
    cd "$srcdir" ;;
esac

if [ "$1" = "--without-autotools" ] ; then
  shift
else
  if [ "$1" = "--clean" ] ; then
    shift
    rm -rf INST BUILD
  fi

  test -d INST || mkdir INST
  instdir=`pwd`/INST

  test -d BUILD || mkdir BUILD
  cd BUILD

  lazy_build autoconf 2.62 tar.bz2 de2b6f57da07427794c56e25844e31f35fc46755
  lazy_build automake 1.10.1 tar.bz2 cd2e0f7054d4edc75cbf87cd8a92962b3b417b74
  lazy_build libtool 2.2.4 tar.bz2 bc485fd07c8b12820234240e9ef41dba693af2b7

  for t in autoreconf autoconf autoheader autom4te automake aclocal libtoolize
  do
     var=`echo "$t"|tr a-z A-Z`
     eval "$var=\"\$instdir\"/bin/$t;export $var"
  done

  cd ..
fi

case `${LIBTOOLIZE-libtoolize} --version` in
"")
  echo "${LIBTOOLIZE-libtoolize} not found"
  exit 1 ;;
"libtoolize (GNU libtool) 1.4.*")
  echo "${LIBTOOLIZE-libtoolize} is from libtool 1.4 which is too old - libtool 2.2 is required."
  echo "If you have both installed, set LIBTOOLIZE to point to the correct version."
  exit 1 ;;
"libtoolize (GNU libtool) 1.5.*")
  echo "${LIBTOOLIZE-libtoolize} is from libtool 1.5 which is too old - libtool 2.2 is required."
  echo "If you have both installed, set LIBTOOLIZE to point to the correct version."
  exit 1 ;;
esac

SWIG=""
# Don't try to build xapian-applications/dbtools or xapview - they need work.
# As does cvssearch.
# We no longer snapshot xapian-applications/queryserver since it hasn't seen a
# check-in for ages.
modules=
for module in xapian-core xapian-applications/omega swig xapian-bindings ; do
  d=$module
  if test -f "$d/configure.ac" -o -f "$d/configure.in" ; then
    echo "Bootstrapping \`$module'"
    test -f "$d/preautoreconf" && "$d/preautoreconf"
    # Use --install as debian's autoconf wrapper uses 2.5X if it sees it
    # (but it doesn't check for -i).
    #
    # Use --force so that we update files if autoconf, automake, or libtool
    # has been upgraded.
    #
    # If we have a custom INSTALL file, preserve it since autoreconf insists on
    # replacing INSTALL with "generic installation instructions" when --force
    # is used.  Be careful to replace it if autoreconf fails.
    if test -f "$d/INSTALL" ; then
      if grep 'generic installation instructions' "$d/INSTALL" >/dev/null 2>&1 ; then
	:
      else
	mv -f "$d/INSTALL" "$d/INSTALL.preserved-by-bootstrap"
      fi
    fi
    autoreconf_rc=
    if test swig = "$module" ; then
      # SWIG provides its own bootstrapping script.
      curdir=`pwd`
      cd "$d"
      ./autogen.sh || autoreconf_rc=$?
      cd "$curdir"
      # Use the uninstalled wrapper for the in-tree copy of SWIG.
      SWIG="\$here/swig/preinst-swig"
    else
      ${AUTORECONF-autoreconf} --install --force "$d" || autoreconf_rc=$?
    fi
    if test -f "$d/INSTALL.preserved-by-bootstrap" ; then
      mv -f "$d/INSTALL.preserved-by-bootstrap" "$d/INSTALL"
    fi
    if test -n "$autoreconf_rc" ; then
      exit $autoreconf_rc
    fi
    modules="$modules $module"
  fi
done

# Generate the top-level configure script.
rm -f configure.tmp
cat <<'TOP_OF_CONFIGURE' > configure.tmp
#!/bin/sh
# configure each submodule in a xapian source tree
# Generated by Xapian top-level bootstrap script.
#
# Copyright (C) 2003,2004,2007,2008 Olly Betts
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301
# USA

trap 'echo "configure failed"' EXIT
set -e

# Produced escaped version of command suitable for pasting back into sh
cmd=$0
for a ; do
 case $a in
  *[^-A-Za-z0-9_+=:@/.,]*)
   esc_a=`echo "$a"|sed 's!\([^-A-Za-z0-9_+=:@/.,]\)!\\\\\\1!g'`
   cmd="$cmd $esc_a" ;;
  *)
   cmd="$cmd $a" ;;
 esac
done

here=`pwd`
TOP_OF_CONFIGURE

# Produce an absolute path to srcdir.
srcdir_abs=`pwd`
# This section is unquoted so we can substitute variables.
cat <<MIDDLE_OF_CONFIGURE >> configure.tmp
srcdir="$srcdir_abs"
modules="$modules"
MIDDLE_OF_CONFIGURE

for tool in SWIG AUTORECONF AUTOCONF AUTOHEADER AUTOM4TE AUTOMAKE ACLOCAL LIBTOOLIZE ; do
  eval "val=\$$tool"
  if [ -n "$val" ] ; then
     echo ': ${'"$tool=$val"'}' >> configure.tmp
     echo "export $tool" >> configure.tmp
  fi
done

cat <<'END_OF_CONFIGURE' >> configure.tmp
dirs=
XAPIAN_CONFIG=$here/xapian-core/xapian-config
ACLOCAL="${ACLOCAL-aclocal} -I $srcdir/xapian-core/m4-macros"
for d in $modules ; do
  if test "$here" = "$srcdir" ; then
    configure=./configure
  else
    configure=$srcdir/$d/configure
  fi
  if test -f "$configure" ; then
    if test -d "$d" ; then : ; else
      case $d in
      xapian-applications/*) test -d xapian-applications || mkdir xapian-applications ;;
      esac
      mkdir "$d"
    fi
    echo "Configuring \`$d'"
    # Use a shared config.cache for speed and to save a bit of diskspace, but
    # don't share it with SWIG just in case it manages to probe and cache
    # different answers (e.g. because it uses a C compiler).
    case $d in
    swig)
      cd "$d" && "$configure" ${1+"$@"}
      ;;
    xapian-core)
      cd "$d" && "$configure" --enable-maintainer-mode --cache-file="$here/config.cache" ${1+"$@"}
      ;;
    *)
      cd "$d" && "$configure" --enable-maintainer-mode --cache-file="$here/config.cache" XAPIAN_CONFIG="$XAPIAN_CONFIG" ACLOCAL="$ACLOCAL" ${1+"$@"}
      ;;
    esac
    cd "$here"
    dirs="$dirs $d"
  fi
done

rm -f Makefile.tmp
echo "# Makefile generated by:" > Makefile.tmp
echo "# $cmd" >> Makefile.tmp
for target in all install uninstall install-strip clean distclean mostlyclean maintainer-clean dist check distcheck ; do
  echo >> Makefile.tmp
  echo "$target:" >> Makefile.tmp
  for d in $dirs ; do
    case $d,$target in
    swig,install*|swig,uninstall|swig,dist|swig,check|swig,distcheck|swig,all)
      # Need to ensure swig is built before "make dist", "make check", etc.
      echo "	cd $d && \$(MAKE)" >> Makefile.tmp ;;
    swig,mostlyclean)
      echo "	cd $d && \$(MAKE) clean" >> Makefile.tmp ;;
    swig,*)
      echo "	cd $d && \$(MAKE) $target" >> Makefile.tmp ;;
    xapian-bindings,distcheck)
      # FIXME: distcheck doesn't currently work for xapian-bindings because
      # xapian-core isn't installed.
      echo "	cd $d && \$(MAKE) check dist" >> Makefile.tmp ;;
    *)
      echo "	cd $d && \$(MAKE) $target" >> Makefile.tmp ;;
    esac
  done
  case $target in
    distclean|maintainer-clean) echo "	rm -f Makefile configure config.cache" >> Makefile.tmp ;;
  esac
done
mv -f Makefile.tmp Makefile
trap - EXIT
echo "Configured successfully - now run \"${MAKE-make}\""
END_OF_CONFIGURE

chmod +x configure.tmp
mv -f configure.tmp configure

trap - EXIT
echo "Bootstrapped successfully - now run \"$srcdir/configure\" and \"${MAKE-make}\""
