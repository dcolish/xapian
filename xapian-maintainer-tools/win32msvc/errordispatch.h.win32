/* Warning: This file is generated by ./generate-exceptions - do not modify directly! */
/* Copyright (C) 2003,2004,2006,2007 Olly Betts
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
 */

/* Note that this file isn't an external header - it's located in
 * include/xapian in the source tree because it's generated so this
 * is the simplest way to make inclusion work in a VPATH build.
 */

if (type == "AssertionError") throw Xapian::AssertionError(msg, context);
if (type == "InvalidArgumentError") throw Xapian::InvalidArgumentError(msg, context);
if (type == "InvalidOperationError") throw Xapian::InvalidOperationError(msg, context);
if (type == "UnimplementedError") throw Xapian::UnimplementedError(msg, context);
if (type == "DatabaseError") throw Xapian::DatabaseError(msg, context);
if (type == "DatabaseCorruptError") throw Xapian::DatabaseCorruptError(msg, context);
if (type == "DatabaseCreateError") throw Xapian::DatabaseCreateError(msg, context);
if (type == "DatabaseLockError") throw Xapian::DatabaseLockError(msg, context);
if (type == "DatabaseModifiedError") throw Xapian::DatabaseModifiedError(msg, context);
if (type == "DatabaseOpeningError") throw Xapian::DatabaseOpeningError(msg, context);
if (type == "DocNotFoundError") throw Xapian::DocNotFoundError(msg, context);
if (type == "FeatureUnavailableError") throw Xapian::FeatureUnavailableError(msg, context);
if (type == "InternalError") throw Xapian::InternalError(msg, context);
if (type == "NetworkError") throw Xapian::NetworkError(msg, context);
if (type == "NetworkTimeoutError") throw Xapian::NetworkTimeoutError(msg, context);
if (type == "QueryParserError") throw Xapian::QueryParserError(msg, context);
if (type == "RangeError") throw Xapian::RangeError(msg, context);
