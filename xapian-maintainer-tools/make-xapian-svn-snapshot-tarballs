#!/usr/bin/perl -w
use strict;
use Fcntl ':flock';
use File::Path;

# Configuration:
my $work = "/u1/olly/xapian-svn-snapshot";
$ENV{PATH} = "/u1/olly/install/bin:/usr/bin:/bin";
my $repourl = 'file:///usr/data/xapian-svn/xapian';

# Create the work directory first, since we need it to exist so we can create
# the lockfile.
mkpath($work, 0, 0755);
chdir $work or die $!;

# Prevent multiple instances of this script from running at once.
open LOCK, ">flockme" or die "Couldn't open 'flockme' for writing: $!\n";
unless (flock LOCK, LOCK_EX|LOCK_NB) {
    # Work directory already in use.  Don't print anything or the cron job will
    # send it as mail, which we don't really want.
    exit 1;
}

# If no tags specified, default to those which there are directories for.
# Don't bother to build tags/* since those (generally) don't change.
if (scalar @ARGV == 0) {
    @ARGV = grep /\/[A-Za-z0-9][-A-Za-z0-9_.]*$/ && -d $_,
	glob('branches/[A-Za-z0-9]*');
    -d "trunk" && unshift @ARGV, "trunk";
}

# Or if there are no directories, default to the trunk.
if (scalar @ARGV == 0) {
    @ARGV = 'trunk';
}

foreach my $tag (@ARGV) {
    # SVN tag names aren't restricted like CVS ones, but restrict to sane
    # characters.
    next if $tag !~ /^[-A-Za-z0-9_.\/]+$/;
    if (! -d $tag) {
	print "*** No directory for '$tag'\n";
	next;
    }

    my $logfile = "$tag/snapshot.log";
    my $log = '';
    my $lastlog;
    if (! -d "$tag/xapian/.svn") {
        system "rm", "-rf", "$tag/xapian";
	# Check out the tag into a directory of the same name.
	open SVN, "svn co --non-interactive \Q$repourl/$tag\E \Q$tag\E/xapian 2>&1|" or die $!;
	while (<SVN>) {
	    $log .= $_;
	    $lastlog = $_;
	}
	close SVN or die $!;
    } else {
        # Revert any local changes.
	$log = "svn revert:\n".`svn revert -R \Q$tag\E/xapian 2>&1`."svn up:\n";
	open SVN, "svn up --non-interactive \Q$tag\E/xapian 2>&1|" or die $!;
	my $lines = 0;
	while (<SVN>) {
	    $log .= $_;
	    $lastlog = $_;
	    ++$lines;
	    if (/^C. / || /^.C /) {
                # But we just reverted any local changes!
		die "A conflict?!  That should be impossible!\n";    
	    }
	}
	close SVN or die $!;
	next if ($lines <= 1);
    }
    my ($revision) = ($lastlog =~ /\b(\d+)\b/);

    open LOG, ">", "$logfile.$revision" or die $!;
    # Flush output after every print.
    my $old_fh = select(LOG);
    $| = 1;
    select($old_fh);

    print LOG $log;
    $log = undef;

    if ($tag !~ m!^tags/!) {
	# Modify configure.ac files to insert $revision into version string.
	foreach my $configure_ac
	    (glob("\Q$tag\E/xapian/*/configure.ac"),
	     glob("\Q$tag\E/xapian/*/*/configure.ac")) {
	    open OUT, ">", "tmp.out" or die $!;
	    open IN, "<", $configure_ac or die $!;
	    while (<IN>) {
		s/(^AC_INIT\([^,]*,.*?)(\s*[),])/$1_svn$revision$2/g;
		print OUT;
	    }
	    close IN or die $!;
	    close OUT or die $!;
	    rename "tmp.out", $configure_ac;
	}
    }

    system "rm", "-rf", "$tag/build";
    mkpath("$tag/build", 0, 0755) or die $!;
    chdir "$tag/build" or die $!;

    my $l = "../../$logfile.$revision";

    $log = `../xapian/bootstrap 2>&1`;
    print LOG $log;
    if ($?) {
	print "*** bootstrap failed for '$tag':";
	print $log;
	next;
    }
    $log = undef;

    $log = `./configure --enable-maintainer-mode 2>&1`;
    print LOG $log;
    if ($?) {
	print "*** configure failed for '$tag':";
	print $log;
	next;
    }
    $log = undef;

    $log = `make dist 2>&1`;
    print LOG $log;
    if ($?) {
	print "*** make dist failed for '$tag':";
	print $log;
	next;
    }
    $log = undef;

    my $d = "/usr/data/www/oligarchy.co.uk/xapian/$tag";
    if (! -d $d) {
	mkpath($d, 0, 0755) or die $!;
	open HTACCESS, ">", "$d/.htaccess" or die $!;
	print HTACCESS "IndexOptions NameWidth=*\n";
	close HTACCESS or die $!;
    } else {
	if (-d "$d/old") {
	    my @o = glob "$d/old/*.tar.gz";
	    my $n = scalar @o;
	    @o = grep {-M $_ > 7} @o;
	    $n -= scalar @o;
	    # Delete snapshots more than a week old, but leave at least one.
	    unlink @o if $n > 0;
	} else {
	    mkdir "$d/old", 0755 or die $!;
	    open HTACCESS, ">", "$d/old/.htaccess" or die $!;
	    print HTACCESS "IndexOptions NameWidth=*\n";
	    close HTACCESS or die $!;
	}
	for (glob "$d/*.tar.gz") {
	    my ($leaf) = m!([^/]*)$!;
	    rename $_, "$d/old/$leaf";
	}
    }
    for (glob("*/*.tar.gz"), glob("*/*/*.tar.gz")) {
	system("mv", $_, $d);
    }
    chdir("../..");
}

# Expire logs more than 10 days old
unlink grep {-M $_ > 10} glob 'snapshot.log.*';
