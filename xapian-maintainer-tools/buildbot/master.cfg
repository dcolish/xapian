# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import bbutils
from svnpoller import SVNPoller
from buildbot.process import step, factory

c = bbutils.BuildBotConfig("Xapian", "http://xapian.org/")
BuildmasterConfig = c.c

xapian_svnurl = "svn://svn.xapian.org/"

c.add_bot("linux_amd64_atreus")
c.add_bot("linux_i686_earlgrey")
c.add_bot("win32_mongoose")
c.add_bot("macos_totoro")
c.set_slave_portnum(9989)


sp = SVNPoller(svnurl=xapian_svnurl + 'xapian', pollinterval=60, histmax=100)
sp.split_file = lambda path: ('xapian/trunk', path)
c.add_source(sp)


class Bootstrap(step.ShellCommand):
    name = "bootstrap"
    haltOnFailure = 1
    description = ["bootstrapping"]
    descriptionDone = ["bootstrap"]
    command = ["./bootstrap"]

class GetTarball(step.ShellCommand):
    pass # FIXME - implement this

# Factory for doing HEAD build from SVN, but without cleaning first.
# This build is intended to catch commonly made mistakes quickly.
f = factory.BuildFactory()
f.addStep(step.SVN, baseURL=xapian_svnurl, mode="update")
f.addStep(Bootstrap)
f.addStep(step.Configure)
f.addStep(step.Compile)
f.addStep(step.Test, name="check", command=("make", "check", "XAPIAN_TESTSUITE_OUTPUT=plain", "VALGRIND="))
svn_updated_factory = f

# Factory for doing HEAD build from SVN, without cleaning first, and using valgrind to check.
# This one is much more expensive, so should be run with a higher stable time.
f = factory.BuildFactory()
f.addStep(step.SVN, baseURL=xapian_svnurl, mode="update")
f.addStep(Bootstrap)
f.addStep(step.Configure)
f.addStep(step.Compile)
f.addStep(step.Test, name="check", command=("make", "check", "XAPIAN_TESTSUITE_OUTPUT=plain"))
svn_updated_valgrind_factory = f

# Factory for doing HEAD build from a clean SVN checkout.
# This build also performs a "make distcheck", so should catch problems with
# files which have been missed from the distribution.
# This one is much more expensive, so should be run with a higher stable time.
f = factory.BuildFactory()
f.addStep(step.SVN, baseURL=xapian_svnurl, mode="clobber")
f.addStep(Bootstrap)
f.addStep(step.Configure)
f.addStep(step.Compile)
f.addStep(step.Test, name="check", command=("make", "check", "XAPIAN_TESTSUITE_OUTPUT=plain", "VALGRIND="))
f.addStep(step.Test, name="distcheck", command=("make", "distcheck", "XAPIAN_TESTSUITE_OUTPUT=plain", "VALGRIND="))
svn_clean_factory = f

# Factory for doing a windows build from an SVN checkout, without cleaning first.
f = factory.BuildFactory()
f.addStep(step.SVN, baseURL=xapian_svnurl, mode="update")
win_svn_updated_factory = f

# Factory for doing build from tarballs.
tarball_root = "http://www.oligarchy.co.uk/xapian/trunk/"
tarballs = [
    'xapian-core',
    'xapian-bindings',
    'xapian-omega',
]
f = factory.BuildFactory()
#f.addStep(GetTarball, root=tarball_root, tarballs=tarballs)
tarball_factory = f

c.addScheduler("xapian_svn_quick", branch="xapian/trunk", treeStableTimer=70) 
c.addScheduler("xapian_svn_slow", branch="xapian/trunk", treeStableTimer=15*60) 

c.addBuilder("xapian_head_update_linux_amd64", svn_updated_factory, "linux_amd64_atreus", "xapian_svn_quick")
c.addBuilder("xapian_head_update_valgrind_linux_amd64", svn_updated_valgrind_factory, "linux_amd64_atreus", "xapian_svn_slow")
c.addBuilder("xapian_head_update_linux_i686", svn_updated_factory, "linux_i686_earlgrey", "xapian_svn_slow")
c.addBuilder("xapian_head_update_macos", svn_updated_factory, "macos_totoro", "xapian_svn_slow")
c.addBuilder("xapian_head_update_win32", win_svn_updated_factory, "win32_mongoose", "xapian_svn_slow")
c.addBuilder("xapian_head_clean_linux_amd64", svn_clean_factory, "linux_amd64_atreus", "xapian_svn_slow")



# FIXME - we set the hostname to localhost, because you currently need to
# tunnel in with SSH anyway.  We'll fix this eventually.
c.add_status_html_waterfall(hostname="localhost", http_port=8010)
c.add_status_irc(host="irc.freenode.net",
		 nick="xapian-buildbot",
		 channels=["#xapian-devel-test"])

c.finalise()
