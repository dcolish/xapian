#!/bin/bash
# Build packages in a chroot.
#
# Copyright (C) 2006,2007 Olly Betts
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

set -e

REPO_URL=http://www.xapian.org/debian-tmp

LINTIAN_FLAGS="-l0 -I"
LINDA_FLAGS="-t E,W,X,I"

if [ x"$1" = x--help -o "$#" -lt 3 ] ; then
  echo "Usage: $0 CODENAME ARCH VERSION [PACKAGES...]"
  echo "e.g. $0 etch i386 1.0.0"
  exit 1
fi

# Usage: build_package DSC_FILE
build_package() {
  pbuilder build --no-targz --buildplace "$CHROOT_DIR" --buildresult "$POOL" "$1"
}

rm -rf Sources.gz *.dsc *.orig.tar.gz *.diff.gz

CODENAME=$1
ARCH=$2
VERSION=$2
shift
shift
PACKAGES=${*-"core bindings omega"}

CHROOT=$CODENAME-$ARCH

POOL=pool/$VERSION/$CODENAME/binary
CHROOT_DIR=/chroot/$CHROOT

mkdir -p "$POOL"

DSC_PATH="$REPO_URL/pool/$VERSION/$CODENAME/source/"

wget -nv "$REPO_URL/dists/$CODENAME/main/source/Sources.gz"

skip=yes
gzip -dc Sources.gz | while read line ; do
  if test -n "$skip" ; then
    case $line in
      Files:*) skip= ;;
    esac
  elif test -n "$line" ; then
    FILE=`echo "$line"|sed 's/.* //'`
    if expr "$FILE" : ".*_${VERSION}[-.]" ; then
      wget -nv "$DSC_PATH$FILE"
    else
      echo "*** Not version $VERSION, ignoring: '$FILE'"
    fi
  else
    skip=yes
  fi
done

rm -rf "$CHROOT_DIR"/tmp/*

# Remove any old libxapian packages.
dchroot -c "$CHROOT" -- 'apt-get --force-yes -y remove libxapian.\*' || true

# Remove /tmp/tmp-repo from sources.list as it won't currently exist.
perl -ni -e 'print unless m!^deb file:/tmp/tmp-repo/ \./$!' \
    "$CHROOT_DIR"/etc/apt/sources.list
dchroot -c "$CHROOT" -- 'apt-get update'
dchroot -c "$CHROOT" -- 'apt-get --force-yes -y dist-upgrade'

if expr "$PACKAGES" : '.*core' ; then
  build_package xapian-core_*.dsc

  rm -rf "$CHROOT_DIR"/tmp/*
else
  echo "*** WARNING : Using an already built libxapian package"
fi

mkdir "$CHROOT_DIR"/tmp/tmp-repo
ln "$POOL"/libxapian* "$CHROOT_DIR"/tmp/tmp-repo \
  || cp "$POOL"/libxapian* "$CHROOT_DIR"/tmp/tmp-repo
(
  cd "$CHROOT_DIR"/tmp/tmp-repo
  dpkg-scanpackages -a "$ARCH" . /dev/null | gzip -9 > Packages.gz
)

echo 'deb file:/tmp/tmp-repo/ ./' >> "$CHROOT_DIR"/etc/apt/sources.list
dchroot -c "$CHROOT" -- 'apt-get update'
dchroot -c "$CHROOT" -- 'apt-get --force-yes -y dist-upgrade'

if expr "$PACKAGES" : '.*bindings' ; then
  # Need to ensure python is installed in the chroot so that the xapian-bindings
  # install script can discover the default python version.
  # FIXME : not sure this is actually required now...
  dchroot -c "$CHROOT" -- 'apt-get --force-yes -y install python'

  build_package xapian-bindings_*.dsc
  rm -rf "$CHROOT_DIR"/tmp/*
fi

if expr "$PACKAGES" : '.*omega' ; then
  build_package xapian-omega_*.dsc
  rm -rf "$CHROOT_DIR"/tmp/*
fi

ARCHDIR=dists/$CODENAME/main/binary-$ARCH
mkdir -p "$ARCHDIR"

find pool -not -name '*.deb' -type f -print|perl -ne 'chomp;unlink'

if [ "core bindings omega" = "$PACKAGES" ] ; then
  dpkg-scanpackages -a "$ARCH" "$POOL" /dev/null \
      | gzip -9 > "$ARCHDIR/Packages.gz"
else
  echo "*** WARNING : Can't generate new Packages.gz for partial build - FIXME"
fi

lintian $LINTIAN_FLAGS *.dsc "$POOL"/*.deb
#linda $LINDA_FLAGS *.dsc "$POOL"/*.deb
