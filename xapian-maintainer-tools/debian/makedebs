#!/bin/sh -x
# Make Debian packages from a xapian source tree.
#
# Copyright (C) 2004 Richard Boulton
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA

set -e

# Version of Xapian to build
VERSION=0.8.0

# Patch numbers of packages to build
PATCHNUM_CORE=9
PATCHNUM_BINDINGS=4
PATCHNUM_OMEGA=1

# CVS tag to use to check out xapian.
CVSTAG="v`echo ${VERSION} | sed 's/\./-/g'`"
DEBTAG="debian`echo ${VERSION} | sed 's/\./-/g'`_"

# Debian component to build for (libc version being the most important factor)
COMPONENT=stable

# Options to pass to dpkg-buildpackage
BUILDPACKAGE_OPTS="-us -uc -d"

# Location to download tarballs from.
CVSROOT=":pserver:cvsuser@cvs.xapian.org:/usr/data/cvs"

# Location to place the generated apt repository
PUBDIR="/home/richard/pub/http/xapian-apt/"

# Temporary directory to install core in
TMPDIR="/tmp/xapian-core$$"


## BEGIN PROCESSING ##
trap "(rm -rf $TMPDIR;echo \"makedebs failed\")" EXIT

# Checkout debian control files from CVS
mkdir -p control
cd control
  cvs -Q -d ${CVSROOT} co -r ${DEBTAG}${PATCHNUM_CORE} -d xapian-core xapian/xapian-core/debian
  cvs -Q -d ${CVSROOT} co -r ${DEBTAG}${PATCHNUM_BINDINGS} -d xapian-bindings xapian/xapian-bindings/debian
  cvs -Q -d ${CVSROOT} co -r ${DEBTAG}${PATCHNUM_OMEGA} -d xapian-omega xapian/xapian-applications/omega/debian
cd ..

# Calculate location that tarballs should be found at
TARBALL_CORE="${PUBDIR}pool/main/xapian-core_${VERSION}.orig.tar.gz"
TARBALL_BINDINGS="${PUBDIR}pool/main/xapian-bindings_${VERSION}.orig.tar.gz"
TARBALL_OMEGA="${PUBDIR}pool/main/xapian-omega_${VERSION}.orig.tar.gz"

# Make distribution tarballs, if we don't already have some
if [ -e ${TARBALL_CORE} -a -e ${TARBALL_BINDINGS} -a -e ${TARBALL_OMEGA} ];
then
  # Distribution tarballs all exist
  true
else
  # Checkout original packages from CVS
  rm -rf origsrc
  mkdir -p origsrc
  cd origsrc
    cvs -Q -d ${CVSROOT} co -r $CVSTAG xapian
    cd xapian
      ./bootstrap
      ./configure --enable-maintainer-mode
      if [ -e ${TARBALL_CORE} ]; then true; else
        cd xapian-core
	  make dist
	  cp xapian-core-${VERSION}.tar.gz ${TARBALL_CORE}
	cd ..
      fi
      if [ -e ${TARBALL_BINDINGS} ]; then true; else
        cd xapian-bindings
	  make dist
	  cp xapian-bindings-${VERSION}.tar.gz ${TARBALL_BINDINGS}
	cd ..
      fi
      if [ -e ${TARBALL_OMEGA} ]; then true; else
        cd xapian-applications/omega
	  make dist
	  rm -rf distdir
	  mkdir -p distdir
	  tar zxvf omega-${VERSION}.tar.gz
	  mv omega-${VERSION} xapian-omega-${VERSION}
	  tar zcvf xapian-omega-${VERSION}.tar.gz xapian-omega-${VERSION}
	  cp xapian-omega-${VERSION}.tar.gz ${TARBALL_OMEGA}
	cd ../..
      fi
    cd ..
  cd ..
  rm -rf origsrc
fi

# Unpack distribution tarballs, and put the debian control files into place.
rm -rf build
mkdir -p build
cd build
  # Build packages from xapian-core
  tar zxf ${TARBALL_CORE}
  cd xapian-core-${VERSION}
    mkdir -p debian
    cp -af ../../control/xapian-core/* debian/

    debian/rules # Generates generate control from control.in
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_OPTS}

    # Build and install (to a temporary location) the core library
    mkdir -p build-tmp
    cd build-tmp
      ../configure --prefix=${TMPDIR}
      make
      make install
    cd ..
  cd ..
  # Add new library to beginning of path.
  export PATH
  PATH="$TMPDIR/bin:$PATH"

  # Build packages from xapian-bindings
  tar zxf ${TARBALL_BINDINGS}
  cd xapian-bindings-${VERSION}
    mkdir -p debian
    cp -af ../../control/xapian-bindings/* debian/
    debian/rules # Generates control from control.in and control-python.in
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_OPTS}
  cd ..

  # Build packages from xapian-omega
  tar zxf ${TARBALL_OMEGA}
  cd xapian-omega-${VERSION}
    mkdir -p debian
    cp -af ../control/xapian-omega/* debian/
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_OPTS}
  cd ..

# FIXME - Build packages from xapian-examples

# Leave the build directory
cd ..

# Create package repository
mkdir -p apt/pool/main
packages="build/*.deb build/xapian*.dsc build/xapian*.tar.gz build/xapian*.changes"
mv $packages apt/pool/main

cd apt
  touch Override
  DEB_HOST_ARCH=`dpkg-architecture -qDEB_HOST_ARCH`
  PACKAGES_DIR=dists/$COMPONENT/main/binary-$DEB_HOST_ARCH
  SOURCES_DIR=dists/$COMPONENT/main/source
  mkdir -p $PACKAGES_DIR
  mkdir -p $SOURCES_DIR
  dpkg-scanpackages pool Override | gzip -9 > $PACKAGES_DIR/Packages.gz
  dpkg-scansources  pool Override | gzip -9 > $SOURCES_DIR/Sources.gz
  cat >$PACKAGES_DIR/Release <<EOF
Archive: $COMPONENT
Component: main
Origin: Xapian
Label: Xapian
Architecture: $DEB_HOST_ARCH
EOF
  cat >$SOURCES_DIR/Release <<EOF
Archive: $COMPONENT
Component: main
Origin: Xapian
Label: Xapian
Architecture: source
EOF
cd ..

mkdir -p ${PUBDIR}
cp -af apt/* ${PUBDIR}

trap EXIT
rm -rf "${TMPDIR}"
echo "Made Debian packages successfully"
