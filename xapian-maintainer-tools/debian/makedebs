#!/bin/sh -x
# Make the Debian binary packages from the source packages.
#
# Copyright (C) 2004 Richard Boulton
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA

set -e

COMPONENT=unstable
VERSION='0.8.2'
DEBVER_CORE='3'
DEBVER_BINDINGS='2'
DEBVER_OMEGA='2'

# Options to pass to dpkg-buildpackage when building binary packages.
BUILDPACKAGE_BIN_OPTS="-us -uc -d -b"

# Location of apt repository on www.xapian.org.
PUBDIR="/usr/data/www/xapian.org/debian"


## Items after this point should not normally need to be modified

# Temporary directory to place a built copy of the core library in.
TMPDIR="/tmp/xapian$$"

## BEGIN PROCESSING ##
trap "(rm -rf $TMPDIR;echo \"makedebs failed\")" EXIT

# Determine the architecture we're building on
DEB_HOST_ARCH=`dpkg-architecture -qDEB_HOST_ARCH`

# Detect if we're on the machine that Xapian apt repository is held on, so
# that we don't transfer the packages over the network if we don't need to.
ONIXION=no
if [ "x`hostname -f`" == "xixion.tartarus.org" ] ; then
  if [ -r '/usr/data/cvs/xapian' ] ; then
    ONIXION=yes
  fi
fi

# This variable will be used when we finish support for snapshot packages.
EXTRA_VERSION_UPSTREAM=

# If we're building for the stable distribution, we need to add a bit
# to the debian version number, to avoid conflicts with the package in
# unstable.  We add "0stable" since it should sort before any other
# modification.
EXTRA_VERSION_DEBIAN=""
if [ "x$COMPONENT" == "xstable" ] ; then
  EXTRA_VERSION_DEBIAN=".0stable"
fi

# TARGETDIR is the location that all generated files will be stored in.
if [ "x$EXTRA_VERSION_UPSTREAM" == "x" ] ; then
  TARGETDIR="dists/$COMPONENT/main"
else
  TARGETDIR="dists/$COMPONENT/snapshot"
fi
PKGDIR="$TARGETDIR/binary-$DEB_HOST_ARCH"
POOLDIR="pool/$VERSION"

# Calculate location that control files should be found at
FILEBASE_CORE="xapian-core_${VERSION}-${DEBVER_CORE}${EXTRA_VERSION_DEBIAN}"
FILEBASE_BINDINGS="xapian-bindings_${VERSION}-${DEBVER_BINDINGS}${EXTRA_VERSION_DEBIAN}"
FILEBASE_OMEGA="xapian-omega_${VERSION}-${DEBVER_OMEGA}${EXTRA_VERSION_DEBIAN}"

if [ $ONIXION == yes ] ; then
  CONTROL_CORE="${PUBDIR}/$POOLDIR/${FILEBASE_CORE}.dsc"
  CONTROL_BINDINGS="${PUBDIR}/$POOLDIR/${FILEBASE_BINDINGS}.dsc"
  CONTROL_OMEGA="${PUBDIR}/$POOLDIR/${FILEBASE_OMEGA}.dsc"
else
  mkdir -p src
  FILES="www.xapian.org:${PUBDIR}/$POOLDIR/xapian-core_${VERSION}.orig.tar.gz \
    www.xapian.org:${PUBDIR}/$POOLDIR/${FILEBASE_CORE}.dsc \
    www.xapian.org:${PUBDIR}/$POOLDIR/${FILEBASE_CORE}.diff.gz \
    www.xapian.org:${PUBDIR}/$POOLDIR/xapian-bindings_${VERSION}.orig.tar.gz \
    www.xapian.org:${PUBDIR}/$POOLDIR/${FILEBASE_BINDINGS}.dsc \
    www.xapian.org:${PUBDIR}/$POOLDIR/${FILEBASE_BINDINGS}.diff.gz \
    www.xapian.org:${PUBDIR}/$POOLDIR/xapian-omega_${VERSION}.orig.tar.gz \
    www.xapian.org:${PUBDIR}/$POOLDIR/${FILEBASE_OMEGA}.dsc \
    www.xapian.org:${PUBDIR}/$POOLDIR/${FILEBASE_OMEGA}.diff.gz"
  # Transfer the files one at a time - rsync doesn't seem to allow multiple
  # remote source files.
  for FILE in ${FILES}; do
    rsync --progress -e ssh ${FILE} src
  done
  CONTROL_CORE="`pwd`/src/${FILEBASE_CORE}.dsc"
  CONTROL_BINDINGS="`pwd`/src/${FILEBASE_BINDINGS}.dsc"
  CONTROL_OMEGA="`pwd`/src/${FILEBASE_OMEGA}.dsc"
fi

# Make tarballs, if we don't already have some
if [ -e ${CONTROL_CORE} -a -e ${CONTROL_BINDINGS} -a -e ${CONTROL_OMEGA} ];
then
  # Distribution tarballs all exist
  true
else
  echo "Source packages do not exist: run ./makepackages first"
  exit 1
fi

# Build binary packages
rm -rf build
mkdir -p build
cd build
  # Build packages from xapian-core
  dpkg-source -x ${CONTROL_CORE}
  cd xapian-core-${VERSION}
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_BIN_OPTS}
  cd ..

  # Build and install (to a temporary location) the core library
  cd xapian-core-${VERSION}
    mkdir -p build-tmp
    cd build-tmp
      ../configure --prefix=${TMPDIR}/core
      make
      make install
    cd ..
  cd ..
  # Add new library to beginning of path.
  export PATH
  PATH="$TMPDIR/core/bin:$PATH"

  # Build packages from xapian-bindings
  dpkg-source -x ${CONTROL_BINDINGS}
  cd xapian-bindings-${VERSION}
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_BIN_OPTS}
  cd ..

  # Build packages from xapian-omega
  dpkg-source -x ${CONTROL_OMEGA}
  cd xapian-omega-${VERSION}
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_BIN_OPTS}
  cd ..

# FIXME - Build packages from xapian-examples

# Leave the build directory
cd ..

# Create binary package repository
pkg_files="build/*.deb"
rm -rf "upload-packages"
mkdir -p "upload-packages/$PKGDIR"
mkdir -p "upload-packages/$POOLDIR"
mv $pkg_files upload-packages/$POOLDIR
cat >upload-packages/$PKGDIR/Release <<EOF
Archive: $COMPONENT
Component: main
Origin: Xapian
Label: Xapian
Architecture: $DEB_HOST_ARCH
EOF
cd upload-packages
  touch Override
  dpkg-scanpackages $POOLDIR Override | gzip -9 > $PKGDIR/Packages.gz
  rm Override
cd ..

if [ $ONIXION == yes ] ; thens
  mkdir -p ${PUBDIR}
  cp -af upload-packages/* ${PUBDIR}
else
  rsync --progress -e ssh -r upload-packages/* ixion.tartarus.org:${PUBDIR}
fi

trap EXIT
rm -rf "${TMPDIR}"
echo "Made Debian packages successfully"
