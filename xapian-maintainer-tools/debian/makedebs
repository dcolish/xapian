#!/bin/sh
# Make the Debian binary packages from the source packages.
#
# Copyright (C) 2004 Richard Boulton
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA

# Usage: ./makedebs [COMPONENT]
# COMPONENT defaults to "stable".
# Currently, the only sensible alternate value is "unstable".

cat <<EOF
WARNING - this script will attempt to install some of the generated packages
using sudo.  This is required to generate some of the dependencies correctly.
If you do not wish it to try this, abort now!

If installation fails, a local copy of xapian will be generated, and
functioning packages will be generated, but some of the dependencies in the
package descriptions may be incorrect or missing.
EOF
sleep 5;

set -e

COMPONENT=stable
VERSION='0.9.4'
DEBVER_CORE='1'
DEBVER_BINDINGS='1'
DEBVER_OMEGA='1'

# Options to pass to dpkg-buildpackage when building binary packages.
BUILDPACKAGE_BIN_OPTS="-us -uc -b"

# Location of apt repository on www.xapian.org.
PUBDIR="/usr/data/www/xapian.org/debian"


## Items after this point should not normally need to be modified

# Temporary directory to place a built copy of the core library in.
TMPDIR="/tmp/xapian$$"

# Host to get source tarballs from, and to upload them to.
REMOTE_HOST="ixion.tartarus.org"

## BEGIN PROCESSING ##
trap "(rm -rf $TMPDIR;echo \"makedebs failed\")" EXIT

# Get the component specified by the user.
if [ "x$1" != "x" ] ; then
  COMPONENT=$1
fi

# Check that the component is sane.
case $COMPONENT in
  (stable)
    echo "Building for $COMPONENT" ;;
  (unstable)
    echo "Building for $COMPONENT" ;;
  (breezy)
    echo "Building for $COMPONENT" ;;
  (*)
    echo "Component \"$COMPONENT\" not known - try \"stable\" or \"unstable\""
    exit 1
    ;;
esac

# Determine the architecture we're building on
DEB_HOST_ARCH=`dpkg-architecture -qDEB_HOST_ARCH`

# Detect if we're on the machine that Xapian apt repository is held on, so
# that we don't transfer the packages over the network if we don't need to.
ONIXION=no
if [ "x`hostname -f`" == "xixion.tartarus.org" ] ; then
  if [ -r '/home/xapian-svn' ] ; then
    ONIXION=yes
  fi
fi

# This variable will be used when we finish support for snapshot packages.
EXTRA_VERSION_UPSTREAM=

# If we're building for anything other than the stable distribution, we need to add a bit
# to the debian version number, to avoid conflicts with the package in
# stable.  We add "99$COMPONENT" since it should sort before any other
# modification.

EXTRA_VERSION_DEBIAN=""
if [ "x$COMPONENT" != "xstable" ] ; then
  EXTRA_VERSION_DEBIAN=".99$COMPONENT"
fi

# TARGETDIR is the location that all generated files will be stored in.
if [ "x$EXTRA_VERSION_UPSTREAM" == "x" ] ; then
  TARGETDIR="dists/$COMPONENT/main"
else
  TARGETDIR="dists/$COMPONENT/snapshot"
fi
PKGDIR="$TARGETDIR/binary-$DEB_HOST_ARCH"
POOLDIR="pool/$VERSION"

# Calculate location that control files should be found at
FILEBASE_CORE="xapian-core_${VERSION}-${DEBVER_CORE}${EXTRA_VERSION_DEBIAN}"
FILEBASE_BINDINGS="xapian-bindings_${VERSION}-${DEBVER_BINDINGS}${EXTRA_VERSION_DEBIAN}"
FILEBASE_OMEGA="xapian-omega_${VERSION}-${DEBVER_OMEGA}${EXTRA_VERSION_DEBIAN}"

if [ $ONIXION == yes ] ; then
  CONTROL_CORE="${PUBDIR}/${POOLDIR}/source/${FILEBASE_CORE}.dsc"
  CONTROL_BINDINGS="${PUBDIR}/${POOLDIR}/source/${FILEBASE_BINDINGS}.dsc"
  CONTROL_OMEGA="${PUBDIR}/${POOLDIR}/source/${FILEBASE_OMEGA}.dsc"
else
  mkdir -p src
  # Copy the source files over.
  # Note: this will probably copy some out-of-date files too, but
  # they should be pretty small (just diff files), and therefore shouldn't
  # cause any problems.
  rsync --partial --progress -e ssh -r "${REMOTE_HOST}:${PUBDIR}/${POOLDIR}/source/" src
  CONTROL_CORE="`pwd`/src/${FILEBASE_CORE}.dsc"
  CONTROL_BINDINGS="`pwd`/src/${FILEBASE_BINDINGS}.dsc"
  CONTROL_OMEGA="`pwd`/src/${FILEBASE_OMEGA}.dsc"
fi

# Make tarballs, if we don't already have some
if [ -e ${CONTROL_CORE} -a -e ${CONTROL_BINDINGS} -a -e ${CONTROL_OMEGA} ];
then
  # Distribution tarballs all exist
  true
else
  echo "Source packages do not exist: run ./makesources first"
  exit 1
fi

# Build binary packages
rm -rf build
mkdir -p build
cd build
  # Build packages from xapian-core
  dpkg-source -x ${CONTROL_CORE}
  cd xapian-core-${VERSION}
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_BIN_OPTS}
  cd ..

  # Install the newly generated packages, if possible.
  sudo /usr/bin/dpkg -i *.deb
  if [ $? -ne 0 ];
  then
    # Build and install (to a temporary location) the core library
    cd xapian-core-${VERSION}
      mkdir -p build-tmp
      cd build-tmp
        ../configure --prefix=${TMPDIR}/core
        make
        make install
      cd ..
    cd ..
    # Add new library to beginning of path.
    export PATH
    PATH="$TMPDIR/core/bin:$PATH"
    # Tell buildpackage not to worry about dependencies.
    BUILDPACKAGE_BIN_OPTS="${BUILDPACKAGE_BIN_OPTS} -d"
  fi

  # Build packages from xapian-bindings
  dpkg-source -x ${CONTROL_BINDINGS}
  cd xapian-bindings-${VERSION}
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_BIN_OPTS}
  cd ..

  # Build packages from xapian-omega
  dpkg-source -x ${CONTROL_OMEGA}
  cd xapian-omega-${VERSION}
    fakeroot dpkg-buildpackage ${BUILDPACKAGE_BIN_OPTS}
  cd ..

# Leave the build directory
cd ..

# Create binary package repository
pkg_files="build/*.deb"
rm -rf "upload-packages"
mkdir -p "upload-packages/$PKGDIR"
mkdir -p "upload-packages/${POOLDIR}/binary"
mv $pkg_files upload-packages/${POOLDIR}/binary
cat >upload-packages/$PKGDIR/Release <<EOF
Archive: $COMPONENT
Component: main
Origin: Xapian
Label: Xapian
Architecture: $DEB_HOST_ARCH
EOF
cd upload-packages
  touch Override
  dpkg-scanpackages ${POOLDIR}/binary Override | gzip -9 > $PKGDIR/Packages.gz
  rm Override
  chmod ugo+r -R *
  chmod ug+w -R *
cd ..

if [ $ONIXION == yes ] ; then
  mkdir -p ${PUBDIR}
  cp -af upload-packages/* ${PUBDIR}
else
  rsync --partial --perms --progress -e ssh -r upload-packages/* ${REMOTE_HOST}:${PUBDIR}
fi

trap EXIT
rm -rf "${TMPDIR}"
echo "Made Debian packages successfully"
