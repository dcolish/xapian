Instructions for hacking on Xapian
==================================

This file is aimed to help developers get started with working on
Xapian. The Xapian SourceForge project page is at
<http://sourceforge.net/projects/xapian/>, and contains various tools
that help support us.

Extra options to give to configure:
===================================

Note: Non-developer configure options are described in INSTALL

You will probably want to use some of these if you're going to be developing
Xapian.

--enable-debug
	This enables compiling of assertion code, to produce warnings if
	the code gets into an unexpected state, and also compiling into
	the system of debugging symbols.

--enable-debug=partial
        This option enables debugging symbols, and some assertions.  It does
	not enable verbose debugging messages or very expensive assertions.

--enable-debug-verbose
	This enables compiling into the system of code to generate verbose
	debugging messages.  See "Debugging Messages", below.

--enable-debug=full
	This is the same as --enable-debug --enable-debug-verbose

Debugging Messages
==================

Lots of places in the code generate debugging messages to tell us what
they're up to, and this information can be very useful.  However, its got
to such a stage that we need to be able to turn it on and off easily: and
so I've set up a system for controlling the debugging output by means of
environment variables.  You can:

 o) set OM_DEBUG_FILE to be the path to a file that you would like debugging
    output to be stored in (to override the default of stderr).

 o) set OM_DEBUG_TYPES to a bitmap to select the types of debugging message
    you would like to display.  Currently, all messages are selected by
    setting bit 0 (ie, OM_DEBUG_TYPES=1), but they will be differentiated
    into separate classes in future.

Of course, if you didn't compile with --enable-debug=full, these environment
variables will have no effect.

Debugging memory allocations
============================

The testsuite library used in most of the test programs (apitest, internaltest,
nettest) includes implementations of the C++ memory allocation operators
(operator new/delete).  These help the testsuite to detect memory leaks.

When a test reports a memory leak, rerun it with the "-v" command-line option
and note down the hex number in bracket "()" for the leak you want to
investigate.

Then set OM_ALLOC_TRAP to this value and rerun the test - e.g.:

OM_ALLOC_TRAP=1c ./run-apitest -v

This will cause a segfault when this block is allocated and you can use gdb
to find out where this is.

Building with various profiling and leak-finding tools:
=======================================================

For use with valgrind, no special build flags are required, except to disable
pthread support (valgrind doesn't support threaded applications, at least at
present):

  ./configure --disable-pthread-support

To enable profiling for gprof (was --enable-profiling):

  CFLAGS=-pg CXXFLAGS=-pg LDFLAGS=-pg ./configure

To use Purify (was --enable-purify):

  CXXLD='purify c++' CCLD='purify cc' ./configure --disable-shared

To use Insure (was --enable-insure):

  CXX=insure CC=insure ./configure

Building from CVS:
==================

The CVS repository does not contain any automatically generated files
(such as configure and Makefile.in's).  Because of this, you need to run
several programs to build these files, before you can run the normal
build process.

At the time of writing, these programs are autoconf, libtool and automake.
Some older versions of these programs may not work correctly: at the
time of writing, the versions known to work are:

	automake (GNU automake) 1.5
		This is required as automake 1.4 has problems with "make dist"
		in a VPATH build, and doesn't support AM_CFLAGS/AM_CXXFLAGS.
		Note that automake 1.6 has a bug which causes it to emit
		spurious warnings: this is fixed in automake 1.6.1.
		
	Autoconf version 2.13
		autoconf >= 2.50 is likely to become a requirement in the
		medium term.
		
	ltmain.sh (GNU libtool) 1.3.3

Please tell us if you find that older (or newer) versions work or fail to work.

We have provided a simple standard script to run these programs for you:
simply run ${source-directory}/buildall, in the same way you would normally
run configure.  Arguments passed to buildall are in turn passed on to configure.

You may need to add extra macro directories to the path searched by aclocal
(which is part of autoconf) - you may do this by specifying these in the
ACLOCAL_FLAGS environment variable.

See "buildall --help" for more information. Alternatively, there is a
good overview of the GNU autotools at <http://sources.redhat.com/autobook/>.

Submitting Patches:
===================

If you have a patch to fix a problem in Xapian, or to add a new
feature, feel free to submit it to us via the SourceForge patch
management system. Any major changes should be discussed on the
xapian-devel mailing list first (see
<http://lists.sourceforge.net/mailman/listinfo/xapian-devel>

We find patches generated with "diff -puN" easiest to read.  If you are
working from a CVS copy of the code, you can use "cvs diff -puN" to generate
your patch, or put the line "diff -puN" in your ~/.cvsrc file and just use
"cvs diff".

We will however do our best to give proper attribution to you.  In
particular, if we have used patches from you, or received helpful
reports or advice, we will add your name to the AUTHORS file; unless
you specifically request us not to.  If you see we have forgotten to
do this, please draw it to our attention so that we can sort it out.

Developers with CVS access:
===========================

People who are more seriously involved with the project are likely to
have write access to the repository at SourceForge. This section gives
the conventions for those developers. In addition to this, obviously
you should make sure you update any documentation, especially the
inline source code documentation that generates the API docs.

1  Make sure the tests are right
--------------------------------

 * If you're adding a feature, also add tests for it.
 * If you've fixed a bug, make sure there's a regression test which
   fails on the existing code and succeeds after your changes.
 * Make sure all existing tests continue to pass.

If you don't know how to write tests using the Xapian test rig, then
ask. It's reasonably simple once you've done it once. There is a brief
introduction to the Xapian test system in docs/tests.txt .

2  Make sure the attributions are right
---------------------------------------

 * If necessary, modify the copyright statement at the top of any
   files you've altered. If there is no copyright statement, you may
   add one (there are a couple of Makefile.am's and similar that don't
   have copyright statements; anything that small doesn't really need
   one anyway, so it's a judgement call).
   If you've added files, they should include the GPL boilerplate
   with your name only.
 * If you're not in there, add yourself to the AUTHORS file.

3  Create a log entry and commit
--------------------------------

 * Add an entry to the ChangeLog file at the top of the module. The
   text of this can be identical to the cvs commit message.
 * Commit to the repository.

Then you can update any patch, bug or feature request items in the
tracker to indicate that they've been dealt with.
