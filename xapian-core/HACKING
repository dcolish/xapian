Instructions for hacking on Omsee
=================================

This file is aimed to help developers get started with working on
Omsee.

Extra options to give to configure:
===================================

Note: Non-developer configure options are described in INSTALL

You will probably want to use some of these if you're going to be developing
Omsee.

--enable-debug
	This enables compiling of assertion code, to produce warnings if
	the code gets into an unexpected state, and also compiling into
	the system of debugging symbols.

--enable-debug=partial
        This option enables debugging symbols, and some assertions.  It does
	not enable verbose debugging messages or very expensive assertions.

--enable-debug-verbose
	This enables compiling into the system of code to generate verbose
	debugging messages.  See "Debugging Messages", below.

--enable-debug=full
	This is the same as --enable-debug --enable-debug-verbose

Debugging Messages
==================

Lots of places in the code generate debugging messages to tell us what
they're up to, and this information can be very useful.  However, its got
to such a stage that we need to be able to turn it on and off easily: and
so I've set up a system for controlling the debugging output by means of
environment variables.  You can:

 o) set OM_DEBUG_FILE to be the path to a file that you would like debugging
    output to be stored in (to override the default of stderr).

 o) set OM_DEBUG_TYPES to a bitmap to select the types of debugging message
    you would like to display.  Currently, all messages are selected by
    setting bit 0 (ie, OM_DEBUG_TYPES=1), but they will be differentiated
    into separate classes in future.

Of course, if you didn't compile with --enable-debug=full, these environment
variables will have no effect.

Debuging memory allocations
===========================

The testsuite library used in most of the test programs (apitest, internaltest,
nettest) includes implementations of the C++ memory allocation operators
(operator new/delete).  These help the testsuite to detect memory leaks.

Some environment variables can be used:

 o) set OM_NEW_TRAP to the hex value of an address to cause the program to
    dump core when that address is allocated.
 
 o) set OM_NEW_TRAP_COUNT to a number greater than 1 to cause the above
    trap to happen at a later occurence of the allocation (ie 2nd, 3rd,
    etc. time that address is allocated).

These are most useful for tracking down memory leaks reported by the
testsuite programs (use the "-v" command-line option) when gdb doesn't
help as much as it could.

Building from CVS:
==================

The CVS repository does not contain any automatically generated files
(such as configure and Makefile.in's).  Because of this, you need to run
several programs to build these files, before you can run the normal
build process.

At the time of writing, these programs are autoconf, libtool and automake.
Some older versions of these programs may not work correctly: at the
time of writing, the versions known to work are:
	automake (GNU automake) 1.4
	Autoconf version 2.13
	ltmain.sh (GNU libtool) 1.3.3
Please tell us if you find that older (or newer) versions work or fail to work.

We have provided a simple standard script to run these programs for you:
simply run ${source-directory}/buildall, in the same way you would normally
run configure.
Arguments passed to buildall are in turn passed on to configure.

You may need to add extra macro directories to the path searched by aclocal
(which is part of autoconf) - you may do this by specifying these in the
ACLOCAL_FLAGS environment variable.

See "buildall --help" for more information.
