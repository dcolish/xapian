dnl Process this file with autoconf to produce a configure script.
AC_INIT(common/database.h)

LIBOMUS_VERSION=0.1.3

AM_INIT_AUTOMAKE(om, ${LIBOMUS_VERSION}-cvs)
AM_CONFIG_HEADER(config.h)

dnl Add parameters for aclocal
dnl (This must come after AM_INIT_AUTOMAKE, since it modifies ACLOCAL)
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AM_PROG_LEX

dnl Checks for perl.  (Needed to make some of the documentation)
AC_PATH_PROG(PERL_PATH, perl)
AM_CONDITIONAL(HAVE_PERL, test -n "$PERL_PATH")
AC_SUBST(PERL_PATH)

dnl Check for latex. (Needed to make some more of the documentation)
AC_PATH_PROG(LATEX_PATH, latex)
AM_CONDITIONAL(HAVE_LATEX, test -n "$LATEX_PATH")
AC_SUBST(LATEX_PATH)

dnl Doc++ is no longer used.
dnl dnl Check for doc++. (Needed to make some more of the documentation)
dnl AC_PATH_PROG(DOCPP_PATH, doc++)
dnl AM_CONDITIONAL(HAVE_DOCPP, test -n "$DOCPP_PATH")
dnl AC_SUBST(DOCPP_PATH)

dnl Check for doxygen. (Needed to make some more of the documentation)
AC_PATH_PROG(DOXYGEN_PATH, doxygen)
AM_CONDITIONAL(HAVE_DOXYGEN, test -n "$DOXYGEN_PATH")
AC_SUBST(DOXYGEN_PATH)

dnl Check for dvips. (Needed to make some more of the documentation)
AC_PATH_PROG(DVIPS_PATH, dvips)
AM_CONDITIONAL(HAVE_DVIPS, test -n "$DVIPS_PATH")
AC_SUBST(DVIPS_PATH)

dnl Use libtool to manage our libraries
AM_PROG_LIBTOOL

dnl Shut libtool up
LIBTOOL="$LIBTOOL --quiet"

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(strerror)

dnl Check for sleepycat library.
dnl FIXME - check for C++ version

SLEEPYCAT_LIBS=
SLEEPYCAT_LINKFLAGS=

dnl This should work for the debian package
AC_CHECK_LIB(db2, db_open, SLEEPYCAT_LIBS=-ldb2++)

dnl This should work for the default installation from sleepycat
if test "x$SLEEPYCAT_LIBS" = "x"; then
  LDFLAGS_sleepysave=$LDFLAGS
  SLEEPYCAT_LINKFLAGS="-L/usr/local/BerkeleyDB/lib/"
  LDFLAGS="$LDFLAGS $SLEEPYCAT_LINKFLAGS"
  AC_CHECK_LIB(db, db_open, SLEEPYCAT_LIBS=-ldb)
  LDFLAGS=$LDFLAGS_sleepysave
fi

have_sleepycat=no
if test ! "x$SLEEPYCAT_LIBS" = "x"; then
  have_sleepycat=yes
  AC_SUBST(SLEEPYCAT_LIBS)
  AC_SUBST(SLEEPYCAT_LINKFLAGS)
fi

dnl ***************************
dnl * Select modules to build *
dnl ***************************

dnl Find out what we've been asked to build

AC_ARG_ENABLE(backend_muscat36,
[  --enable-backend-muscat36 Enable (old) Muscat 3.6 databases (default=yes)],
[case "${enableval}" in
  yes) build_muscat36=true ;;
  no)  build_muscat36=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-muscat36) ;;
esac],[build_muscat36=true])

AC_ARG_ENABLE(backend_sleepy,
[  --enable-backend-sleepy Enable the sleepycat database backend (default=no)],
[case "${enableval}" in
  yes) build_sleepy=true ;;
  no)  build_sleepy=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-sleepy) ;;
esac],[build_sleepy=false])

AC_ARG_ENABLE(backend_inmemory,
[  --enable-backend-inmemory Enable the inmemory database backend (default=yes)],
[case "${enableval}" in
  yes) build_inmemory=true ;;
  no)  build_inmemory=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-inmemory) ;;
esac],[build_inmemory=true])

AC_ARG_ENABLE(backend_multi,
[  --enable-backend-multi  Enable the multi database backend (default=yes)],
[case "${enableval}" in
  yes) build_multi=true ;;
  no)  build_multi=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-multi) ;;
esac],[build_multi=true])

AC_ARG_ENABLE(backend_net,
[  --enable-backend-net    Enable the net database backend (default=yes)],
[case "${enableval}" in
  yes) build_net=true ;;
  no)  build_net=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-net) ;;
esac],[build_net=true])

AC_ARG_ENABLE(pthread-support,
[  --enable-pthread-support Enable pthread support (no|yes)(default=yes)],
[case "${enableval}" in
  yes) use_pthread=true ;;
  no)  use_pthread=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-pthread) ;;
esac], [use_pthread=true])

AC_ARG_ENABLE(profiling,
[  --enable-profiling      Enable profiling support (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_profiling=true ;;
  no)  use_profiling=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-profiling) ;;
esac], [use_profiling=false])

AC_ARG_ENABLE(purify,
[  --enable-purify         Enable purify support (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_purify=true ;;
  no)  use_purify=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-purify) ;;
esac], [use_purify=false])

AC_ARG_ENABLE(insure,
[  --enable-insure         Enable insure support (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_insure=true ;;
  no)  use_insure=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-insure) ;;
esac], [use_insure=false])

dnl Check whether we have pthreads, but only if we want it
if test x$use_pthread = xtrue; then
  AC_CHECK_LIB(pthread, pthread_create)
fi

dnl Turn off compilation of anything that we don't have the requirements for

if test x$have_sleepycat = xno; then
  build_sleepy=false;
fi

if test x$HAVE_LIBPTHREAD = xno; then
  use_pthread=false
fi

dnl Set conditionals to specify what we compile

AM_CONDITIONAL(BUILD_BACKEND_MUSCAT36, test x$build_muscat36 = xtrue)
AM_CONDITIONAL(BUILD_BACKEND_SLEEPY, test x$build_sleepy = xtrue)
AM_CONDITIONAL(BUILD_BACKEND_INMEMORY, test x$build_inmemory = xtrue)
AM_CONDITIONAL(BUILD_BACKEND_MULTI, test x$build_multi = xtrue)
AM_CONDITIONAL(BUILD_BACKEND_NET, test x$build_net = xtrue)

dnl Set defines to specify what we compile

if test x$build_muscat36 = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_MUSCAT36,,
  [Define if you want to build the (old) Muscat 3.6 backend])
fi

if test x$build_sleepy = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_SLEEPY,,
  [Define if you want to build sleepycat backend])
fi

if test x$build_inmemory = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_INMEMORY,,
  [Define if you want to build inmemory backend])
fi

if test x$build_multi = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_MULTI,,
  [Define if you want to build multi database backend])
fi

if test x$build_net = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_NET,,
  [Define if you want to build net database backend])
fi
if test x$use_pthread = xtrue; then
AC_DEFINE(MUS_USE_PTHREAD,,
  [Define if you want to build with libpthreads support])
fi

dnl *************************
dnl * Set debugging options *
dnl *************************

dnl Work out what debugging we want

AC_ARG_ENABLE(debug, 
[  --enable-debug          Turn on debugging (no|yes|paranoid|full)(default=no)],
[case "${enableval}" in
  full) use_debug_paranoid=yes ; use_debug=yes ; use_debug_verbose=yes ;;
  paranoid) use_debug_paranoid=yes ; use_debug=yes ;;
  yes) use_debug=yes ;;
  no)  use_debug=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac], [use_debug=no])

AC_ARG_ENABLE(mutex-errcheck,
[  --enable-mutex-errcheck Turn on error-checking mutexes (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_mutex_errcheck=yes ;;
  no)  use_mutex_errcheck=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-mutex) ;;
esac], [use_mutex_errcheck=no])

dnl Now set appropriate defines

dnl Clear -g flag
CFLAGS=`echo " $CFLAGS " | sed 's/[ 	][ 	]*/  /g' | sed 's/ -g / /g'`
CXXFLAGS=`echo " $CXXFLAGS " | sed 's/[ 	][ 	]*/  /g' | sed 's/ -g / /g'`

if test "$use_debug" = yes; then
CFLAGS="$CFLAGS -g";
CXXFLAGS="$CXXFLAGS -g";
AC_DEFINE(MUS_DEBUG,,
  [Define if you want debugging to be enabled (will cause some slow down)])
fi

if test "$use_debug_paranoid" = yes; then
AC_DEFINE(MUS_DEBUG_PARANOID,,
  [Define if you want paranoid debugging to be enabled (will cause
  significant slow-down)])
fi

if test "$use_debug_verbose" = yes; then
AC_DEFINE(MUS_DEBUG_VERBOSE,,
  [Define if you want lots of debugging messages])
fi

if test "$use_mutex_errcheck" = yes; then
AC_DEFINE(MUS_MUTEX_ERRCHECK,,
  [Define if you want error-checking mutexes])
fi

dnl *********************
dnl * Profiling options *
dnl *********************

if test "x$use_profiling" = xtrue; then
CFLAGS="$CFLAGS -pg";
CXXFLAGS="$CXXFLAGS -pg";
LDFLAGS="$LDFLAGS -pg";
fi

if test "x$use_purify" = xtrue; then
CXXLD='purify $(CXX)'
CCLD='purify $(CC)'
AC_SUBST(CXXLD)
AC_SUBST(CCLD)
enable_static=no
fi

if test "x$use_insure" = xtrue; then
CXX='insure'
CC='insure'
AC_SUBST(CXX)
AC_SUBST(CC)
fi

dnl ******************************
dnl * Set special compiler flags *
dnl ******************************

dnl Add -Wno-long-long to $CXXFLAGS if it's supported
echo -n "checking whether -Wno-long-long works... "
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
SAVED_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -Wno-long-long"
AC_TRY_COMPILE(,[return 0],
		[echo yes],
		[echo no; CXXFLAGS="$SAVED_CXXFLAGS"])
unset SAVED_CXXFLAGS
AC_LANG_RESTORE

dnl Add -lsocket to $LDFLAGS if needed (eg Solaris)
CME_FIND_SOCKETPAIR

if test "$use_debug" = yes; then
  OPT_LEVEL=""
else
  OPT_LEVEL="-O6"
fi

dnl extra flags for building with gcc
if test "$GCC" = yes; then
  changequote(, ) dnl avoid problems with [] in sed expressions
  CFLAGS=`echo "$CFLAGS -ansi -pedantic -Wall -Wunused " | sed "s/-O[0-9]*/${OPT_LEVEL}/"`
  case "$CFLAGS" in
    *${OPT_LEVEL}*) ;;
    *) CFLAGS="$CFLAGS $OPT_LEVEL"
  esac

  CXXFLAGS=`echo "$CXXFLAGS -ansi -pedantic -Wall -Wunused -Wno-long-long -fno-gnu-keywords" | sed "s/-O[0-9]*/${OPT_LEVEL}/"`
  case "$CXXFLAGS" in
    *${OPT_LEVEL}*) ;;
    *) CXXFLAGS="$CXXFLAGS $OPT_LEVEL"
  esac
  changequote([, ])
fi

dnl *******************************************************************
dnl * Make sure we can reference the top source and build directories *
dnl *******************************************************************

dnl The actual values of these are set in the makefile, so we protect
dnl against expansion here.  Contorted, but it works.
TOP_SRCDIR='$(top_srcdir)'
TOP_BUILDDIR='$(top_builddir)'

AC_SUBST(TOP_SRCDIR)
AC_SUBST(TOP_BUILDDIR)

dnl **************************
dnl * Build the output files *
dnl **************************

AC_OUTPUT(
 Makefile
 include/Makefile
 include/om/Makefile
 common/Makefile
 backends/Makefile
 backends/muscat36/Makefile
 backends/sleepy/Makefile
 backends/multi/Makefile
 backends/inmemory/Makefile
 backends/net/Makefile
 languages/Makefile
 languages/dutch/Makefile
 languages/english/Makefile
 languages/french/Makefile
 languages/german/Makefile
 languages/italian/Makefile
 languages/portuguese/Makefile
 languages/spanish/Makefile
 matcher/Makefile
 api/Makefile
 indexer/Makefile
 tests/Makefile
 docs/Makefile
 m4/Makefile
 autoconf/Makefile
 net/Makefile
 netprogs/Makefile
 libomus-config.nodep
 docs/mkdoc.pl
 docs/doxygen_api_conf
 docs/doxygen_full_conf
 tests/stemtest.pl
,
 if test -r docs/mkdoc.pl ; then chmod +x docs/mkdoc.pl ; fi
 if test -r tests/stemtest.pl ; then chmod +x tests/stemtest.pl ; fi
)
