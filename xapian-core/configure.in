dnl Process this file with autoconf to produce a configure script.

dnl Need autoconf 2.13 or later for 3 argument version of AC_DEFINE
AC_PREREQ(2.13)
AC_INIT(common/database.h)
AC_CONFIG_AUX_DIR(autoconf)

LIBXAPIAN_VERSION=0.4.1

AM_INIT_AUTOMAKE(om, ${LIBXAPIAN_VERSION}-cvs)
AM_CONFIG_HEADER(config.h)

dnl Add parameters for aclocal
dnl (This must come after AM_INIT_AUTOMAKE, since it modifies ACLOCAL)
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AM_PROG_LEX
AC_PROG_YACC

dnl Check for time functions.
AC_CHECK_FUNCS(gettimeofday ftime)

dnl Check for getopt.h.  On some systems, it's in stdlib.h
AC_CHECK_HEADERS(getopt.h)

dnl Check for a stringstream implementation.  (If not present, we roll
dnl one ourselves).
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(sstream)
AC_LANG_RESTORE

dnl Check for a new streams implementation.
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(streambuf)
AC_LANG_RESTORE

dnl check for strcasecmp.
AC_CHECK_FUNCS([strcasecmp])

dnl check for socklen_t
AC_TRY_COMPILE([
#include <sys/types.h>
#include <sys/socket.h>
], [socklen_t t;], have_socklen_t=yes, have_socklen_t=no)
if test "x$have_socklen_t" = "xyes"; then
AC_DEFINE(HAVE_SOCKLEN_T,,
  [Define if socklen_t is available])
fi

dnl Check for -fno-access-control flag to compiler.
dnl Used in some low-level test suite stuff.
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
SAVED_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -fno-access-control"
AC_MSG_CHECKING([for -fno-access-control])
dnl Use AC_TRY_LINK instead of AC_TRY_COMPILE, since some compilers
dnl ignore options they don't understand and just pass them on to ld,
dnl rather than giving an error.  (eg Solaris CC)
AC_TRY_LINK(,[return 0],
		AC_MSG_RESULT(yes); [FNO_ACCESS_FLAG=yes],
		AC_MSG_RESULT(no); [FNO_ACCESS_FLAG=no])
CXXFLAGS="$SAVED_CXXFLAGS"
unset SAVED_CXXFLAGS
AC_LANG_RESTORE
AM_CONDITIONAL(HAVE_CPP_ACCESS_BYPASS, test "$FNO_ACCESS_FLAG" = yes)

dnl Checks for perl.  (Needed to make some of the documentation)
AC_PATH_PROG(PERL_PATH, perl)
AM_CONDITIONAL(HAVE_PERL, test -n "$PERL_PATH")

have_perl_xml_and_text=yes
AC_MSG_CHECKING([for perl XML::Parser module])
if perl -MXML::Parser -e '' 2>/dev/null ; then
    have_perl_xml=yes
else
    have_perl_xml=no
fi
AC_MSG_RESULT("$have_perl_xml")
if test "$have_perl_xml" = no ; then
    AC_MSG_WARN([Perl XML module not present; TODO won't be built.])
    have_perl_xml_and_text=no
fi

AC_MSG_CHECKING([for perl Text::Format module])
if perl -MText::Format -e '' 2>/dev/null
then
    have_perl_text=yes
else
    have_perl_text=no
fi
AC_MSG_RESULT("$have_perl_text")
if test "$have_perl_text" = no; then
    AC_MSG_WARN([Perl Text::Format not present; TODO won't be built.])
    have_perl_xml_and_text=no
fi

AM_CONDITIONAL(HAVE_PERL_XML_AND_TEXT, test "$have_perl_xml_and_text" = yes)


dnl Make DATADIR available to the library
AC_DEFINE_DIR(DATADIR, datadir, [Location of platform independent support files])

dnl Checks for dot.  (Diagrams in the documentation)
AC_PATH_PROG(DOT_PATH, dot)
if test -n "$DOT_PATH" ; then
  DOXYGEN_HAVE_DOT=YES
  DOXYGEN_DOT_PATH=`echo "$DOT_PATH" | sed "s/\/dot$//"`
else
  DOXYGEN_HAVE_DOT=NO
fi
AC_SUBST(DOXYGEN_HAVE_DOT)
AC_SUBST(DOXYGEN_DOT_PATH)

dnl Check for latex. (Needed to make some more of the documentation)
AC_PATH_PROG(LATEX_PATH, latex)
AM_CONDITIONAL(HAVE_LATEX, test -n "$LATEX_PATH")

dnl Doc++ is no longer used.
dnl dnl Check for doc++. (Needed to make some more of the documentation)
dnl AC_PATH_PROG(DOCPP_PATH, doc++)
dnl AM_CONDITIONAL(HAVE_DOCPP, test -n "$DOCPP_PATH")

dnl Check for doxygen. (Needed to make some more of the documentation)
AC_PATH_PROG(DOXYGEN_PATH, doxygen, missing)
AM_CONDITIONAL(HAVE_DOXYGEN, test "x$DOXYGEN_PATH" != xmissing)

dnl Check for dvips. (Needed to make some more of the documentation)
AC_PATH_PROG(DVIPS_PATH, dvips)
AM_CONDITIONAL(HAVE_DVIPS, test -n "$DVIPS_PATH")

dnl Check for swig. (For generating scripting language bindings)
AC_PATH_PROG(SWIG_PATH, swig)
AM_CONDITIONAL(HAVE_SWIG, test -n "$SWIG_PATH")

dnl Check whether we need -ldl for dlsym() etc.
AC_TRY_LINK_FUNC(dlsym, ,
	[AC_CHECK_LIB(dl, dlsym, [DL_LIBS="-ldl"])])
AC_SUBST(DL_LIBS)

dnl Use libtool to manage our libraries
AM_PROG_LIBTOOL

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(strerror)

dnl ***************************
dnl * Select modules to build *
dnl ***************************

dnl Find out what we've been asked to build

dnl muscat36 defaults to off
AC_ARG_ENABLE(backend_muscat36,
[  --enable-backend-muscat36 Enable (old) Muscat 3.6 databases (default=no)],
[case "${enableval}" in
  yes) build_muscat36=true ;;
  no)  build_muscat36=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-muscat36) ;;
esac],[build_muscat36=false])

AC_ARG_ENABLE(backend_quartz,
[  --enable-backend-quartz Enable the quartz database backend (default=yes)],
[case "${enableval}" in
  yes) build_quartz=true ;;
  no)  build_quartz=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-quartz) ;;
esac],[build_quartz=true])

AC_ARG_ENABLE(backend_inmemory,
[  --enable-backend-inmemory Enable the inmemory database backend (default=yes)],
[case "${enableval}" in
  yes) build_inmemory=true ;;
  no)  build_inmemory=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-inmemory) ;;
esac],[build_inmemory=true])

AC_ARG_ENABLE(backend_remote,
[  --enable-backend-remote Enable the remote database backend (default=yes)],
[case "${enableval}" in
  yes) build_remote=true ;;
  no)  build_remote=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-remote) ;;
esac],[build_remote=true])

AC_ARG_ENABLE(pthread-support,
[  --enable-pthread-support Enable pthread support (no|yes)(default=yes)],
[case "${enableval}" in
  yes) use_pthread=true ;;
  no)  use_pthread=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-pthread) ;;
esac], [use_pthread=true])

AC_ARG_ENABLE(profiling,
[  --enable-profiling      Enable profiling support (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_profiling=true ;;
  no)  use_profiling=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-profiling) ;;
esac], [use_profiling=false])

AC_ARG_ENABLE(purify,
[  --enable-purify         Enable purify support (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_purify=true ;;
  no)  use_purify=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-purify) ;;
esac], [use_purify=false])

AC_ARG_ENABLE(insure,
[  --enable-insure         Enable insure support (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_insure=true ;;
  no)  use_insure=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-insure) ;;
esac], [use_insure=false])

AC_ARG_ENABLE(quiet,
[  --enable-quiet          Enable quiet building (default=no)],
[case "${enableval}" in
  yes) use_quiet=true ;;
  no)  use_quiet=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-quiet) ;;
esac], [use_quiet=false])

dnl Check whether we have pthreads, but only if we want it
if test x$use_pthread = xtrue; then
  ACX_PTHREAD(HAVE_PTHREAD="yes")
  if test x$HAVE_PTHREAD != x; then
    LIBS="$PTHREAD_LIBS $LIBS"
    CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
    CC="$PTHREAD_CC"
  fi
fi

dnl Shut things up if we want to be quiet
if test x$use_quiet = xtrue; then
  LIBTOOL="$LIBTOOL --quiet"
fi

dnl Turn off compilation of anything that we don't have the requirements for

if test x$HAVE_PTHREAD = x; then
  if test "x$use_pthread" = "xtrue"; then
    AC_MSG_WARN(pthread not available: not building support);
  fi
  use_pthread=false
fi

dnl Set conditionals to specify what we compile

AM_CONDITIONAL(BUILD_BACKEND_MUSCAT36, test x$build_muscat36 = xtrue)
AM_CONDITIONAL(BUILD_BACKEND_QUARTZ, test x$build_quartz = xtrue)
AM_CONDITIONAL(BUILD_BACKEND_INMEMORY, test x$build_inmemory = xtrue)
AM_CONDITIONAL(BUILD_BACKEND_REMOTE, test x$build_remote = xtrue)
AM_CONDITIONAL(BUILD_PTHREAD_SUPPORT, test x$use_pthread = xtrue)
dnl Set a flag for AM when shared libraries are enabled.
AM_CONDITIONAL(ENABLE_SHARED, test x$enable_shared = xyes)

dnl Set defines to specify what we compile

if test x$build_muscat36 = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_MUSCAT36,,
  [Define if you want to build the (old) Muscat 3.6 backend])
fi

if test x$build_quartz = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_QUARTZ,,
  [Define if you want to build quartz backend])
fi

if test x$build_inmemory = xtrue; then
AC_DEFINE(MUS_BUILD_BACKEND_INMEMORY,,
  [Define if you want to build inmemory backend])
fi

if test x$build_remote = xtrue; then
  dnl Add -lsocket to $LDFLAGS if needed (eg Solaris)
  CME_FIND_SOCKETPAIR

  dnl Add -lnsl to $LDFLAGS if needed (eg Solaris)
  RJB_FIND_GETHOSTENT

  AC_DEFINE(MUS_BUILD_BACKEND_REMOTE,,
    [Define if you want to build remote database backend])
fi

dnl See if we have fdatasync, and what libraries are needed for it.
AC_CHECK_FUNC(fdatasync, , AC_CHECK_LIB(rt, fdatasync))
AC_CHECK_FUNCS(fdatasync fsync)

dnl See if we want to use STLport
RJB_FIND_STLPORT

if test x$use_pthread = xtrue; then
AC_DEFINE(MUS_USE_PTHREAD,,
  [Define if you want to build with libpthreads support])
CFLAGS="$CFLAGS -D_REENTRANT -D_PTHREADS";
CXXFLAGS="$CXXFLAGS -D_REENTRANT -D_PTHREADS";
fi

dnl *************************
dnl * Set debugging options *
dnl *************************

dnl Work out what debugging we want

use_debug=no;
use_debug_paranoid=no;
use_debug_verbose=no;
use_debug_profile=no;

AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging (no|partial|yes|full|profile)(default=no)],
[case "${enableval}" in
  full) use_debug_paranoid=yes ; use_debug=yes ; use_debug_verbose=yes ;;
  yes) use_debug_paranoid=yes ; use_debug=yes ;;
  partial) use_debug=yes ;;
  profile) use_debug_profile=yes ;;
  no)  use_debug=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac])

AC_ARG_ENABLE(debug-verbose,
[  --enable-debug-verbose  Turn on debugging messages (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_debug_verbose=yes ;;
  no)  use_debug_verbose=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug-verbose) ;;
esac])

AC_ARG_ENABLE(mutex-errcheck,
[  --enable-mutex-errcheck Turn on error-checking mutexes (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_mutex_errcheck=yes ;;
  no)  use_mutex_errcheck=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-mutex) ;;
esac], [use_mutex_errcheck=no])

dnl Now set appropriate defines

dnl Clear -g flag
CFLAGS=`echo " $CFLAGS " | sed 's/[ 	][ 	]*/  /g' | sed 's/ -g / /g'`
CXXFLAGS=`echo " $CXXFLAGS " | sed 's/[ 	][ 	]*/  /g' | sed 's/ -g / /g'`

if test "$use_debug" = yes; then
CFLAGS="$CFLAGS -g";
CXXFLAGS="$CXXFLAGS -g";
AC_DEFINE(MUS_DEBUG,,
  [Define if you want debugging to be enabled (will cause some slow down)])
fi

if test "$use_debug_paranoid" = yes; then
AC_DEFINE(MUS_DEBUG_PARANOID,,
  [Define if you want paranoid debugging to be enabled (will cause
  significant slow-down)])
fi

if test "$use_debug_verbose" = yes; then
AC_DEFINE(MUS_DEBUG_VERBOSE,,
  [Define if you want lots of debugging messages])
fi

if test "$use_debug_profile" = yes; then
AC_DEFINE(MUS_DEBUG_PROFILE,,
  [Define if you want code profiling messages])
fi

if test "$use_mutex_errcheck" = yes; then
AC_DEFINE(MUS_MUTEX_ERRCHECK,,
  [Define if you want error-checking mutexes])
fi

dnl *********************
dnl * Profiling options *
dnl *********************

if test "x$use_profiling" = xtrue; then
CFLAGS="$CFLAGS -pg";
CXXFLAGS="$CXXFLAGS -pg";
LDFLAGS="$LDFLAGS -pg";
fi

if test "x$use_purify" = xtrue; then
CXXLD='purify $(CXX)'
CCLD='purify $(CC)'
enable_static=no
else
CXXLD='$(CXX)'
CCLD='$(CC)'
fi
AC_SUBST(CXXLD)
AC_SUBST(CCLD)

if test "x$use_insure" = xtrue; then
CXX='insure'
CC='insure'
fi
AC_SUBST(CXX)
AC_SUBST(CC)

dnl ******************************
dnl * Set special compiler flags *
dnl ******************************

dnl Add -Wno-long-long to $CXXFLAGS if it's supported
AC_MSG_CHECKING([whether -Wno-long-long works with C++])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
SAVED_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -Wno-long-long"
AC_TRY_LINK(,[return 0],
		AC_MSG_RESULT(yes),
		AC_MSG_RESULT(no); [CXXFLAGS="$SAVED_CXXFLAGS"])
unset SAVED_CXXFLAGS
AC_LANG_RESTORE

dnl Add -Wno-long-long to $CFLAGS if it's supported
AC_MSG_CHECKING([whether -Wno-long-long works with C])
AC_LANG_SAVE
AC_LANG_C
SAVED_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -Wno-long-long"
AC_TRY_LINK(,[return 0],
		AC_MSG_RESULT(yes),
		AC_MSG_RESULT(no); [CFLAGS="$SAVED_CFLAGS"])
unset SAVED_CFLAGS
AC_LANG_RESTORE

if test "$use_debug" = yes; then
  OPT_LEVEL=""
else
  OPT_LEVEL="-O6"
fi

dnl extra flags for building with gcc
if test "$GCC" = yes; then
  changequote(, ) dnl avoid problems with [] in sed expressions
  CFLAGS=`echo "$CFLAGS -pedantic -Wall -Wunused " | sed "s/-O[0-9]*/${OPT_LEVEL}/"`
  case "$CFLAGS" in
    *${OPT_LEVEL}*) ;;
    *) CFLAGS="$CFLAGS $OPT_LEVEL"
  esac

  CXXFLAGS=`echo "$CXXFLAGS -pedantic -Wall -Wunused -fno-gnu-keywords" | sed "s/-O[0-9]*/${OPT_LEVEL}/"`
  case "$CXXFLAGS" in
    *${OPT_LEVEL}*) ;;
    *) CXXFLAGS="$CXXFLAGS $OPT_LEVEL"
  esac
  changequote([, ])
fi

dnl modify flags for building with stlport
STLPORT_CFLAGS=""
if test "x$use_stlport" = "xyes"; then
  if test "$GCC" = yes; then
    STLPORT_CFLAGS="-nostdinc++ "
  fi
  STLPORT_CFLAGS="$STLPORT_CFLAGS $STLPORT_INCLUDE"
  CXXFLAGS="$STLPORT_CFLAGS $CXXFLAGS"
  LIBS="$STLPORT_LIBS $LIBS"
fi
AC_SUBST(STLPORT_CFLAGS)

dnl See if large file support is available
AC_SYS_LARGEFILE

dnl *******************************************************************
dnl * Make sure we can reference the top source and build directories *
dnl *******************************************************************

dnl The actual values of these are set in the makefile, so we protect
dnl against expansion here.  Contorted, but it works.
TOP_SRCDIR='$(top_srcdir)'
TOP_BUILDDIR='$(top_builddir)'

AC_SUBST(TOP_SRCDIR)
AC_SUBST(TOP_BUILDDIR)

dnl **************************
dnl * Build the output files *
dnl **************************

AC_OUTPUT(
 Makefile
 testsuite/Makefile
 include/Makefile
 include/om/Makefile
 common/Makefile
 backends/Makefile
 backends/muscat36/Makefile
 backends/quartz/Makefile
 backends/multi/Makefile
 backends/inmemory/Makefile
 backends/net/Makefile
 languages/Makefile
 languages/danish/Makefile
 languages/dutch/Makefile
 languages/english/Makefile
 languages/french/Makefile
 languages/german/Makefile
 languages/italian/Makefile
 languages/norwegian/Makefile
 languages/portuguese/Makefile
 languages/spanish/Makefile
 languages/swedish/Makefile
 languages/porter/Makefile
 matcher/Makefile
 api/Makefile
 tests/Makefile
 docs/Makefile
 m4/Makefile
 autoconf/Makefile
 net/Makefile
 netprogs/Makefile
 xapian-config.nodep
 docs/mkdoc.pl
 docs/todo2html.pl
 docs/doxygen_api_conf
 docs/doxygen_full_conf
 tests/stemtest.pl
 tests/findheaders.pl
 bindings/java/apitest_to_java.pl
 bindings/python/apitest_to_python.pl
 bindings/python/apitest_helpers.py
 bindings/Makefile
 bindings/python/Makefile
 bindings/perl5/Makefile
 bindings/guile/Makefile
 bindings/tcl8/Makefile
 bindings/php4/Makefile
 bindings/java/Makefile
 bindings/java/native/Makefile
 extra/Makefile
,
 for a in docs/mkdoc.pl docs/todo2html.pl tests/stemtest.pl \
          tests/findheaders.pl bindings/java/apitest_to_java.pl ; do
     test -r $a && chmod +x $a
 done
)
