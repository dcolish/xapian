dnl Process this file with autoconf to produce a configure script.

dnl Need autoconf 2.50 or later for many features
dnl 2.54 needed for automake 1.6
AC_PREREQ(2.54)
dnl When updating the version for a release, update -version-info in
dnl Makefile.am and extra/Makefile.am
AC_INIT(xapian-core, 0.7.5)dnl FIXME: bugreport addr as third argument
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR(matcher/andpostlist.cc)

AM_CONFIG_HEADER(config.h)

dnl Use libtool to manage our libraries
AC_PROG_LIBTOOL

dnl Add parameters for aclocal
dnl (This must come after AM_INIT_AUTOMAKE, since it modifies ACLOCAL)
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

dnl disable "maintainer only" rules by default
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_YACC

XAPIAN_LDFLAGS=
AC_SUBST(XAPIAN_LDFLAGS)

ldflags=
if test yesyes = "$GCC$enable_shared" ; then
  case $host_os in
    *mingw* | *cygwin*)
      ldflags="--enable-runtime-pseudo-reloc"
      if $CXX -Wl,$ldflags 2>&1 >/dev/null|grep -e $ldflags >/dev/null 2>&1; then
	dnl The error message contains the flag name - it must be a
	dnl complaint that the option is unrecognized (doing it this
	dnl way allows it to work regardless of the i18n in use):
	dnl ld: unrecognized option '--enable-runtime-pseudo-reloc'
	dnl
	dnl Can't use AC_DISABLE_SHARED after AC_PROG_LIBTOOL, but
	dnl this test needs to be after AC_PROG_LIBTOOL, so we can't
	dnl just disable the shared build automatically...
	AC_MSG_ERROR([ld version too old to support a shared build - configure with --disable-shared, or install binutils 2.13.90-20030111-1 or later])
      fi
      ldflags="-Wl,$ldflags"
    ;;
  esac
fi
dnl Only works for ldflags which can be specified anywhere on the link line.
AC_SUBST(ldflags)

dnl Check for time functions.
AC_CHECK_FUNCS(gettimeofday ftime)

dnl See if ftime returns void (as it does on mingw)
if test $ac_cv_func_ftime = yes ; then
  AC_TRY_COMPILE([#include <sys/timeb.h>],
    [struct timeb tp; int i = ftime(&tp);],
    ,
    AC_DEFINE(FTIME_RETURNS_VOID, 1, [Define if ftime returns void]))
fi

dnl how to find the hostname
AC_CHECK_HEADERS(sys/utsname.h) dnl uname function in here
AC_CHECK_FUNCS(gethostname)

dnl mingw (for instance) lacks ssize_t
AC_CHECK_TYPE(ssize_t, long)

AC_LANG_SAVE
AC_LANG_CPLUSPLUS
dnl Check for a stringstream implementation.  (If not present, we roll
dnl one ourselves).
AC_CHECK_HEADERS(sstream)
dnl Check for a new streams implementation.
AC_CHECK_HEADERS(streambuf)
AC_LANG_RESTORE

dnl check for strcasecmp.
AC_CHECK_FUNCS([strcasecmp])

dnl check for socklen_t
TYPE_SOCKLEN_T

dnl Checks for perl (needed to regenerate some of the documentation)
AC_PATH_PROG(PERL, perl, [$MISSING perl])

dnl Make DATADIR available to the library
AC_DEFINE_DIR(DATADIR, datadir, [Location of platform independent support files])

dnl Checks for dot.  (Diagrams in the documentation)
AC_PATH_PROG(DOT, dot)
if test -n "$DOT" ; then
  DOXYGEN_HAVE_DOT=YES
  DOXYGEN_DOT_PATH=`echo "$DOT" | sed "s/\/dot$//"`
else
  DOXYGEN_HAVE_DOT=NO
fi
AC_SUBST(DOXYGEN_HAVE_DOT)
AC_SUBST(DOXYGEN_DOT_PATH)

dnl Check for latex. (Needed to make some more of the documentation)
AC_PATH_PROG(LATEX, latex, [$MISSING latex])

dnl Check for doxygen. (Needed to make some more of the documentation)
AC_PATH_PROG(DOXYGEN, doxygen, [$MISSING doxygen])

dnl Check for dvips. (Needed to make some more of the documentation)
AC_PATH_PROG(DVIPS, dvips, [$MISSING dvips])

dnl Check whether we need -ldl for dlsym() etc.
dnl No longer used...
dnl AC_TRY_LINK_FUNC(dlsym, ,
dnl	[AC_CHECK_LIB(dl, dlsym, [DL_LIBS="-ldl"])])
dnl AC_SUBST(DL_LIBS)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h)

dnl If valgrind is installed and new enough, we use it for leak checking in the
dnl testsuite.
AC_PATH_PROG(VALGRIND, valgrind, [])
if test -n "$VALGRIND" ; then
  dnl Check that the valgrind version installed supports the most recently
  dnl added client request which we use - VALGRIND_DO_LEAK_CHECK is ages old,
  dnl VALGRIND_COUNT_ERRORS was added at the same time as VALGRIND_COUNT_LEAKS
  AC_EGREP_CPP(yes,
    [#include <valgrind/memcheck.h>
     #ifdef VALGRIND_COUNT_LEAKS
     yes
     #endif
    ], [],
    [VALGRIND=])
fi

if test -n "$VALGRIND" ; then
  AC_DEFINE(HAVE_VALGRIND, 1,
	    [Define if valgrind is installed and it supports VALGRIND_COUNT_LEAKS])
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(strerror)

dnl mingw has _snprintf
AC_CHECK_FUNCS(snprintf _snprintf)
if test $ac_cv_func_snprintf$ac_cv_func__snprintf = noyes ; then
  AC_DEFINE(snprintf, _snprintf,
	    [Define snprintf to whatever it's called on this platform])
  AC_DEFINE(HAVE_SNPRINTF, 1)
fi

dnl ***************************
dnl * Select modules to build *
dnl ***************************

dnl Find out what we've been asked to build

dnl muscat36 defaults to off
AC_ARG_ENABLE(backend_muscat36,
[  --enable-backend-muscat36 Enable (old) Muscat 3.6 databases (default=no)],
[case "${enableval}" in
  yes) build_muscat36=true ;;
  no)  build_muscat36=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-muscat36) ;;
esac],[build_muscat36=false])

AC_ARG_ENABLE(backend_quartz,
[  --enable-backend-quartz Enable the quartz database backend (default=yes)],
[case "${enableval}" in
  yes) build_quartz=true ;;
  no)  build_quartz=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-quartz) ;;
esac],[build_quartz=true])

AC_ARG_ENABLE(backend_inmemory,
[  --enable-backend-inmemory Enable the inmemory database backend (default=yes)],
[case "${enableval}" in
  yes) build_inmemory=true ;;
  no)  build_inmemory=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-inmemory) ;;
esac],[build_inmemory=true])

AC_ARG_ENABLE(backend_remote,
[  --enable-backend-remote Enable the remote database backend (default=yes)],
[case "${enableval}" in
  yes) build_remote=true ;;
  no)  build_remote=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-remote) ;;
esac],[build_remote=true])
dnl check for fork - if we don't have it, the remote backend won't build
AC_CHECK_FUNCS(fork)
if test "$ac_cv_func_fork" = no ; then
  build_remote=false
else
  REMOTE_LDFLAGS=
  dnl Add -lsocket to $LDFLAGS if needed (eg Solaris)
  SAVE_LIBS="$LIBS"
  LIBS=
  AC_SEARCH_LIBS(socketpair, socket, [REMOTE_LDFLAGS="$LIBS"])
  LIBS="$SAVE_LIBS"
  if test "$ac_cv_func_socketpair" = no ; then
    build_remote=false
  else
    dnl Add -lnsl to LDFLAGS if needed (eg Solaris)
    SAVE_LIBS="$LIBS"
    LIBS=
    AC_SEARCH_LIBS(gethostbyname, nsl,
	    [REMOTE_LDFLAGS="$LIBS $REMOTE_LDFLAGS"],
	    build_remote=false)
    LIBS="$SAVE_LIBS"
    if test false != "$build_remote" ; then
      SAVE_LIBS="$LIBS"
      LIBS=
      AC_SEARCH_LIBS(gethostbyaddr, nsl,
	      [
	      case " $REMOTE_LDFLAGS " in
	      "* -lnsl *") ;;
	      *) REMOTE_LDFLAGS="$LIBS $REMOTE_LDFLAGS" ;;
	      esac
	      ],
	      build_remote=false)
      LIBS="$SAVE_LIBS"
    fi
  fi
  if test false != "$build_remote" ; then
    XAPIAN_LDFLAGS="$XAPIAN_LDFLAGS $REMOTE_LDFLAGS"
  fi
fi

AC_ARG_ENABLE(quiet,
[  --enable-quiet          Enable quiet building (default=no)],
[case "${enableval}" in
  yes) use_quiet=true ;;
  no)  use_quiet=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-quiet) ;;
esac], [use_quiet=false])

dnl Shut things up if we want to be quiet
if test true = "$use_quiet"; then
  LIBTOOL="$LIBTOOL --quiet"
fi

dnl Turn off compilation of anything that we don't have the requirements for

dnl Set conditionals to specify what we compile

AM_CONDITIONAL(BUILD_BACKEND_MUSCAT36, test true = "$build_muscat36")
AM_CONDITIONAL(BUILD_BACKEND_QUARTZ, test true = "$build_quartz")
AM_CONDITIONAL(BUILD_BACKEND_INMEMORY, test true = "$build_inmemory")
AM_CONDITIONAL(BUILD_BACKEND_REMOTE, test true = "$build_remote")
dnl Set a flag for AM when shared libraries are enabled.
dnl AM_CONDITIONAL(ENABLE_SHARED, test yes = "$enable_shared")

dnl Set defines to specify what we compile

if test true = "$build_muscat36"; then
AC_DEFINE(MUS_BUILD_BACKEND_MUSCAT36,,
  [Define if you want to build the (old) Muscat 3.6 database backend])
fi

if test true = "$build_quartz"; then
AC_DEFINE(MUS_BUILD_BACKEND_QUARTZ,,
  [Define if you want to build the quartz database backend])
fi

if test true = "$build_inmemory"; then
AC_DEFINE(MUS_BUILD_BACKEND_INMEMORY,,
  [Define if you want to build the inmemory database backend])
fi

if test true = "$build_remote"; then
  AC_DEFINE(MUS_BUILD_BACKEND_REMOTE,,
    [Define if you want to build the remote database backend])
fi

dnl See if we have fdatasync, and what libraries are needed for it.
SAVE_LIBS="$LIBS"
LIBS=
AC_SEARCH_LIBS(fdatasync, rt, [XAPIAN_LDFLAGS="$LIBS $XAPIAN_LDFLAGS"])
LIBS="$SAVE_LIBS"

AC_CHECK_FUNCS(fsync)

AC_CHECK_FUNCS(pread pwrite)

AC_CHECK_FUNCS(link)

dnl See if we want to use STLport
RJB_FIND_STLPORT

dnl *************************
dnl * Set debugging options *
dnl *************************

dnl Work out what debugging we want

use_debug=no
use_debug_paranoid=no
use_debug_verbose=no
use_debug_profile=no

AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging (no|partial|yes|full|profile)(default=no)],
[case "${enableval}" in
  full) use_debug_paranoid=yes ; use_debug=yes ; use_debug_verbose=yes ;;
  yes) use_debug_paranoid=yes ; use_debug=yes ;;
  partial) use_debug=yes ;;
  profile) use_debug_profile=yes ;;
  no) use_debug=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac])

AC_ARG_ENABLE(debug-verbose,
[  --enable-debug-verbose  Turn on debugging messages (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_debug_verbose=yes ;;
  no)  use_debug_verbose=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug-verbose) ;;
esac])

dnl Now set appropriate defines

if test yes = "$use_debug"; then
AC_DEFINE(MUS_DEBUG,,
  [Define if you want debugging to be enabled (will cause some slow down)])
fi

if test yes = "$use_debug_paranoid"; then
AC_DEFINE(MUS_DEBUG_PARANOID,,
  [Define if you want paranoid debugging to be enabled (will cause
  significant slow-down)])
fi

if test yes = "$use_debug_verbose"; then
AC_DEFINE(MUS_DEBUG_VERBOSE,,
  [Define if you want lots of debugging messages])
fi

if test yes = "$use_debug_profile"; then
AC_DEFINE(MUS_DEBUG_PROFILE,,
  [Define if you want code profiling messages])
fi

dnl ******************************
dnl * Set special compiler flags *
dnl ******************************

dnl extra flags for building with gcc
if test yes = "$GCC" ; then
  dnl Since -Wno-long-long appeared by GCC 2.95 and there's not much likelihood
  dnl Xapian will with anything earlier version, there's not much point testing
  dnl for it.
  AM_CFLAGS="$AM_CFLAGS -Wall -W -Wno-long-long"
  AM_CXXFLAGS="$AM_CXXFLAGS -Wall -W -Wno-long-long -fno-gnu-keywords"
fi

dnl modify flags for building with stlport
STLPORT_CXXFLAGS=
if test yes = "$use_stlport"; then
  if test yes = "$GCC"; then
    STLPORT_CXXFLAGS="-nostdinc++"
  fi
  STLPORT_CXXFLAGS="$STLPORT_CXXFLAGS $STLPORT_INCLUDE"
  AM_CXXFLAGS="$STLPORT_CXXLAGS $AM_CXXFLAGS"
  LIBS="$STLPORT_LIBS $LIBS"
fi
AC_SUBST(STLPORT_CXXFLAGS)

AC_SUBST(AM_CFLAGS)
AC_SUBST(AM_CXXFLAGS)

dnl See if large file support is available
AC_SYS_LARGEFILE

APIDOC_SRC="`cd \"$srcdir\";echo include/xapian/*.h|sed 's!include/xapian/version.h!!;s!include!$T/include!g'`"
dnl find SOURCEDOC in 3 goes to avoid overflowing the 4096 character
dnl line length limit in some sed implementations
SOURCEDOC_CC_SRC="`cd \"$srcdir\";find . -name tests -prune -o -name \*.cc -print|sed 's!^\.!$T!'|tr '
' ' '`"
SOURCEDOC_C_SRC="`cd \"$srcdir\";find . -name tests -prune -o -name \*.c -print|sed 's!^\.!$T!'|tr '
' ' '`"
SOURCEDOC_H_SRC="`cd \"$srcdir\";find . -name tests -prune -o -name include -prune -o -name \*.h -print|sed '/^\.\/confdefs\.h$/d;s!^\.!$T!'|tr '
' ' '`"
AC_SUBST(APIDOC_SRC)
AC_SUBST(SOURCEDOC_CC_SRC)
AC_SUBST(SOURCEDOC_C_SRC)
AC_SUBST(SOURCEDOC_H_SRC)

dnl *******************************************************************
dnl * Make sure we can reference the top source and build directories *
dnl *******************************************************************

dnl The actual values of these are set in the makefile, so we protect
dnl against expansion here.  Contorted, but it works.
TOP_SRCDIR='$(top_srcdir)'
TOP_BUILDDIR='$(top_builddir)'

AC_SUBST(TOP_SRCDIR)
AC_SUBST(TOP_BUILDDIR)

dnl **************************
dnl * Build the output files *
dnl **************************

AC_CONFIG_FILES([
 Makefile
 testsuite/Makefile
 include/Makefile
 common/Makefile
 backends/Makefile
 backends/muscat36/Makefile
 backends/quartz/Makefile
 backends/multi/Makefile
 backends/inmemory/Makefile
 backends/net/Makefile
 languages/Makefile
 matcher/Makefile
 api/Makefile
 tests/Makefile
 docs/Makefile
 m4/Makefile
 autoconf/Makefile
 net/Makefile
 bin/Makefile
 getopt/Makefile
 extra/Makefile
 docs/doxygen_api_conf
 docs/doxygen_full_conf
 xapian.spec
 ])
AC_CONFIG_FILES([tests/runtest], [chmod +x tests/runtest])
AC_CONFIG_FILES([xapian-config], [chmod +x xapian-config])
AC_OUTPUT

MAJOR_VERSION="`echo \"$VERSION\"|sed 's/\..*//'`"
[MINOR_VERSION="`echo \"$VERSION\"|sed 's/[^.]*\.//;s/\..*//'`"]
dnl for portability, files run through $CXXCPP must have extension .c .cc or .C
rm -f _xaptmp.cc
ln -s $srcdir/include/xapian/version.h.in _xaptmp.cc
test -d include/xapian || mkdir include/xapian
$CXXCPP -DVERSION="$VERSION" -DMAJOR_VERSION="$MAJOR_VERSION" -DMINOR_VERSION="$MINOR_VERSION" _xaptmp.cc|sed '/^\(# .*\)\? *$/d;s/^%$//;s/  */ /g;s!^% !// !;s/^%/#/;s/%/__/g' > include/xapian/version.h.tmp
rm -f _xaptmp.cc
if cmp include/xapian/version.h.tmp include/xapian/version.h >/dev/null 2>&1
then
  rm include/xapian/version.h.tmp
else
  mv include/xapian/version.h.tmp include/xapian/version.h
fi
