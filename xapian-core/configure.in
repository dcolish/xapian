dnl Process this file with autoconf to produce a configure script.

dnl Need autoconf 2.50 or later for many features
dnl 2.54 needed for automake 1.6
AC_PREREQ(2.54)
AC_INIT(xapian-core, 0.5.0)dnl FIXME: bugreport addr as third argument
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR(matcher/andpostlist.cc)

AM_CONFIG_HEADER(config.h)

dnl Use libtool to manage our libraries
AC_PROG_LIBTOOL

dnl Add parameters for aclocal
dnl (This must come after AM_INIT_AUTOMAKE, since it modifies ACLOCAL)
ACLOCAL="$ACLOCAL $ACLOCAL_FLAGS"

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
dnl AM_PROG_LEX generates a bogus warning with autoconf 2.52 and automake 1.5
dnl - just ignore this until autoconf or automake is updated to fix it.
dnl Using AC_PROG_LEX instead isn't the answer as then automake generates a
dnl warning.  Either would do - with autoconf 2.50 or later, the only difference
dnl is that LEX is set to use "missing" if neither flex nor lex is found, but we
dnl need flex anyway since our scanner uses flex extensions.
AM_PROG_LEX
if test flex != "$LEX"; then
  LEX="$MISSING flex"
  AC_SUBST(LEX_OUTPUT_ROOT, lex.yy)
  AC_SUBST(LEXLIB, '')
fi
AC_PROG_YACC

dnl Check for time functions.
AC_CHECK_FUNCS(gettimeofday ftime)

dnl Check for a stringstream implementation.  (If not present, we roll
dnl one ourselves).
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(sstream)
AC_LANG_RESTORE

dnl Check for a new streams implementation.
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
AC_CHECK_HEADERS(streambuf)
AC_LANG_RESTORE

dnl check for strcasecmp.
AC_CHECK_FUNCS([strcasecmp])

dnl check for socklen_t
TYPE_SOCKLEN_T

dnl Check for -fno-access-control flag to compiler.
dnl Used in some low-level test suite stuff.
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
SAVED_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -fno-access-control"
AC_MSG_CHECKING([for -fno-access-control])
dnl Use AC_TRY_LINK instead of AC_TRY_COMPILE, since some compilers
dnl ignore options they don't understand and just pass them on to ld,
dnl rather than giving an error.  (eg Solaris CC)
AC_TRY_LINK(,[return 0],
		AC_MSG_RESULT(yes); [FNO_ACCESS_FLAG=yes],
		AC_MSG_RESULT(no); [FNO_ACCESS_FLAG=no])
CXXFLAGS="$SAVED_CXXFLAGS"
unset SAVED_CXXFLAGS
AC_LANG_RESTORE
AM_CONDITIONAL(HAVE_CPP_ACCESS_BYPASS, test yes = "$FNO_ACCESS_FLAG")

dnl Checks for perl (needed to regenerate some of the documentation)
AC_PATH_PROG(PERL, perl, [$MISSING perl])

have_perl_xml_and_text=yes
AC_MSG_CHECKING([for perl XML::Parser module])
if (exec >&5 2>&5 ; $PERL -MXML::Parser -e ''; exit $?) then
    have_perl_xml=yes
else
dnl Message could worry those building the library - few people modify todo.xml
dnl which is the only thing we need this module for.
dnl    AC_MSG_WARN([Perl XML::Parser module not present; TODO won't be built.])
    have_perl_xml=no
    have_perl_xml_and_text=no
fi
AC_MSG_RESULT($have_perl_xml)

AC_MSG_CHECKING([for perl Text::Format module])
if (exec >&5 2>&5 ; $PERL -MText::Format -e ''; exit $?) then
    have_perl_text=yes
else
dnl Message could worry those building the library - few people modify todo.xml
dnl which is the only thing we need this module for.
dnl    AC_MSG_WARN([Perl Text::Format not present; TODO won't be built.])
    have_perl_text=no
    have_perl_xml_and_text=no
fi
AC_MSG_RESULT($have_perl_text)

AM_CONDITIONAL(HAVE_PERL_XML_AND_TEXT, test yes = "$have_perl_xml_and_text")

dnl Make DATADIR available to the library
AC_DEFINE_DIR(DATADIR, datadir, [Location of platform independent support files])

dnl Checks for dot.  (Diagrams in the documentation)
AC_PATH_PROG(DOT, dot)
if test -n "$DOT" ; then
  DOXYGEN_HAVE_DOT=YES
  DOXYGEN_DOT_PATH=`echo "$DOT" | sed "s/\/dot$//"`
else
  DOXYGEN_HAVE_DOT=NO
fi
AC_SUBST(DOXYGEN_HAVE_DOT)
AC_SUBST(DOXYGEN_DOT_PATH)

dnl Check for latex. (Needed to make some more of the documentation)
AC_PATH_PROG(LATEX, latex, [$MISSING latex])

dnl Check for doxygen. (Needed to make some more of the documentation)
AC_PATH_PROG(DOXYGEN, doxygen, [$MISSING doxygen])

dnl Check for dvips. (Needed to make some more of the documentation)
AC_PATH_PROG(DVIPS, dvips, [$MISSING dvips])

dnl dnl Check for swig. (For generating scripting language bindings)
dnl dnl set SWIG to swig if not found so we give a better error if someone
dnl dnl tries to use it
dnl AC_PATH_PROG(SWIG, swig, swig)
dnl AM_CONDITIONAL(HAVE_SWIG, test swig != "$SWIG")

dnl Check whether we need -ldl for dlsym() etc.
AC_TRY_LINK_FUNC(dlsym, ,
	[AC_CHECK_LIB(dl, dlsym, [DL_LIBS="-ldl"])])
AC_SUBST(DL_LIBS)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(strerror)

dnl ***************************
dnl * Select modules to build *
dnl ***************************

dnl Find out what we've been asked to build

dnl muscat36 defaults to off
AC_ARG_ENABLE(backend_muscat36,
[  --enable-backend-muscat36 Enable (old) Muscat 3.6 databases (default=no)],
[case "${enableval}" in
  yes) build_muscat36=true ;;
  no)  build_muscat36=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-muscat36) ;;
esac],[build_muscat36=false])

AC_ARG_ENABLE(backend_quartz,
[  --enable-backend-quartz Enable the quartz database backend (default=yes)],
[case "${enableval}" in
  yes) build_quartz=true ;;
  no)  build_quartz=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-quartz) ;;
esac],[build_quartz=true])

AC_ARG_ENABLE(backend_inmemory,
[  --enable-backend-inmemory Enable the inmemory database backend (default=yes)],
[case "${enableval}" in
  yes) build_inmemory=true ;;
  no)  build_inmemory=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-inmemory) ;;
esac],[build_inmemory=true])

AC_ARG_ENABLE(backend_remote,
[  --enable-backend-remote Enable the remote database backend (default=yes)],
[case "${enableval}" in
  yes) build_remote=true ;;
  no)  build_remote=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-backend-remote) ;;
esac],[build_remote=true])

AC_ARG_ENABLE(quiet,
[  --enable-quiet          Enable quiet building (default=no)],
[case "${enableval}" in
  yes) use_quiet=true ;;
  no)  use_quiet=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-quiet) ;;
esac], [use_quiet=false])

dnl Shut things up if we want to be quiet
if test true = "$use_quiet"; then
  LIBTOOL="$LIBTOOL --quiet"
fi

dnl Turn off compilation of anything that we don't have the requirements for

dnl Set conditionals to specify what we compile

AM_CONDITIONAL(BUILD_BACKEND_MUSCAT36, test true = "$build_muscat36")
AM_CONDITIONAL(BUILD_BACKEND_QUARTZ, test true = "$build_quartz")
AM_CONDITIONAL(BUILD_BACKEND_INMEMORY, test true = "$build_inmemory")
AM_CONDITIONAL(BUILD_BACKEND_REMOTE, test true = "$build_remote")
dnl Set a flag for AM when shared libraries are enabled.
AM_CONDITIONAL(ENABLE_SHARED, test yes = "$enable_shared")

dnl Set defines to specify what we compile

if test true = "$build_muscat36"; then
AC_DEFINE(MUS_BUILD_BACKEND_MUSCAT36,,
  [Define if you want to build the (old) Muscat 3.6 database backend])
fi

if test true = "$build_quartz"; then
AC_DEFINE(MUS_BUILD_BACKEND_QUARTZ,,
  [Define if you want to build the quartz database backend])
fi

if test true = "$build_inmemory"; then
AC_DEFINE(MUS_BUILD_BACKEND_INMEMORY,,
  [Define if you want to build the inmemory database backend])
fi

if test true = "$build_remote"; then
  dnl Add -lsocket to $LDFLAGS if needed (eg Solaris)
  CME_FIND_SOCKETPAIR

  dnl Add -lnsl to $LDFLAGS if needed (eg Solaris)
  RJB_FIND_GETHOSTENT

  AC_DEFINE(MUS_BUILD_BACKEND_REMOTE,,
    [Define if you want to build the remote database backend])
fi

dnl See if we have fdatasync, and what libraries are needed for it.
AC_CHECK_FUNC(fdatasync, , AC_CHECK_LIB(rt, fdatasync))
dnl unset the cached value since linking with "-lrt" may change the answer
unset ac_cv_func_fdatasync
AC_CHECK_FUNCS(fdatasync fsync)

dnl See if we want to use STLport
RJB_FIND_STLPORT

dnl *************************
dnl * Set debugging options *
dnl *************************

dnl Work out what debugging we want

use_debug=no
use_debug_paranoid=no
use_debug_verbose=no
use_debug_profile=no

AC_ARG_ENABLE(debug,
[  --enable-debug          Turn on debugging (no|partial|yes|full|profile)(default=no)],
[case "${enableval}" in
  full) use_debug_paranoid=yes ; use_debug=yes ; use_debug_verbose=yes ;;
  yes) use_debug_paranoid=yes ; use_debug=yes ;;
  partial) use_debug=yes ;;
  profile) use_debug_profile=yes ;;
  no)  use_debug=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug) ;;
esac])

AC_ARG_ENABLE(debug-verbose,
[  --enable-debug-verbose  Turn on debugging messages (no|yes)(default=no)],
[case "${enableval}" in
  yes) use_debug_verbose=yes ;;
  no)  use_debug_verbose=no ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-debug-verbose) ;;
esac])

dnl Now set appropriate defines

if test yes = "$use_debug"; then
AC_DEFINE(MUS_DEBUG,,
  [Define if you want debugging to be enabled (will cause some slow down)])
fi

if test yes = "$use_debug_paranoid"; then
AC_DEFINE(MUS_DEBUG_PARANOID,,
  [Define if you want paranoid debugging to be enabled (will cause
  significant slow-down)])
fi

if test yes = "$use_debug_verbose"; then
AC_DEFINE(MUS_DEBUG_VERBOSE,,
  [Define if you want lots of debugging messages])
fi

if test yes = "$use_debug_profile"; then
AC_DEFINE(MUS_DEBUG_PROFILE,,
  [Define if you want code profiling messages])
fi

dnl ******************************
dnl * Set special compiler flags *
dnl ******************************

dnl Add -Wno-long-long to $AM_CXXFLAGS if it's supported
AC_MSG_CHECKING([whether -Wno-long-long works with C++])
AC_LANG_SAVE
AC_LANG_CPLUSPLUS
SAVED_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -Wno-long-long"
AC_TRY_LINK(,[return 0],
		AC_MSG_RESULT(yes); [AM_CXXFLAGS="$AM_CXXFLAGS -Wno-long-long"],
		AC_MSG_RESULT(no))
CXXFLAGS="$SAVED_CXXFLAGS"
unset SAVED_CXXFLAGS
AC_LANG_RESTORE

dnl Add -Wno-long-long to $AM_CFLAGS if it's supported
AC_MSG_CHECKING([whether -Wno-long-long works with C])
AC_LANG_SAVE
AC_LANG_C
SAVED_CFLAGS="$CFLAGS"
CFLAGS="$CFLAGS -Wno-long-long"
AC_TRY_LINK(,[return 0],
		AC_MSG_RESULT(yes); [AM_CFLAGS="$AM_CFLAGS -Wno-long-long"],
		AC_MSG_RESULT(no))
CFLAGS="$SAVED_CFLAGS"
unset SAVED_CFLAGS
AC_LANG_RESTORE

dnl extra flags for building with gcc
if test yes = "$GCC"; then
  AM_CFLAGS="$AM_CFLAGS -Wall -Wunused"
  AM_CXXFLAGS="$AM_CXXFLAGS -Wall -Wunused -fno-gnu-keywords"
fi

dnl modify flags for building with stlport
STLPORT_CXXFLAGS=
if test yes = "$use_stlport"; then
  if test yes = "$GCC"; then
    STLPORT_CXXFLAGS="-nostdinc++"
  fi
  STLPORT_CXXFLAGS="$STLPORT_CXXFLAGS $STLPORT_INCLUDE"
  AM_CXXFLAGS="$STLPORT_CXXLAGS $AM_CXXFLAGS"
  LIBS="$STLPORT_LIBS $LIBS"
fi
AC_SUBST(STLPORT_CXXFLAGS)

AC_SUBST(AM_CFLAGS)
AC_SUBST(AM_CXXFLAGS)

dnl See if large file support is available
AC_SYS_LARGEFILE

APIDOC_SRC="`cd \"$srcdir\";find include -name \*.h -print|sed 's!^!$T/!'|tr '
' ' '`"
dnl find SOURCEDOC in 3 goes to avoid overflowing the 4096 character
dnl line length limit in some sed implementations
SOURCEDOC_CC_SRC="`cd \"$srcdir\";find . -name tests -prune -o -name \*.cc -print|sed 's!^\.!$T!'|tr '
' ' '`"
SOURCEDOC_C_SRC="`cd \"$srcdir\";find . -name tests -prune -o -name \*.c -print|sed 's!^\.!$T!'|tr '
' ' '`"
SOURCEDOC_H_SRC="`cd \"$srcdir\";find . -name tests -prune -o -name include -prune -o -name \*.h -print|sed '/^\.\/confdefs\.h$/d;s!^\.!$T!'|tr '
' ' '`"
AC_SUBST(APIDOC_SRC)
AC_SUBST(SOURCEDOC_CC_SRC)
AC_SUBST(SOURCEDOC_C_SRC)
AC_SUBST(SOURCEDOC_H_SRC)

dnl *******************************************************************
dnl * Make sure we can reference the top source and build directories *
dnl *******************************************************************

dnl The actual values of these are set in the makefile, so we protect
dnl against expansion here.  Contorted, but it works.
TOP_SRCDIR='$(top_srcdir)'
TOP_BUILDDIR='$(top_builddir)'

AC_SUBST(TOP_SRCDIR)
AC_SUBST(TOP_BUILDDIR)

dnl **************************
dnl * Build the output files *
dnl **************************

AC_OUTPUT(
 Makefile
 testsuite/Makefile
 include/Makefile
 include/om/Makefile
 common/Makefile
 backends/Makefile
 backends/muscat36/Makefile
 backends/quartz/Makefile
 backends/multi/Makefile
 backends/inmemory/Makefile
 backends/net/Makefile
 languages/Makefile
 languages/danish/Makefile
 languages/dutch/Makefile
 languages/english/Makefile
 languages/french/Makefile
 languages/german/Makefile
 languages/italian/Makefile
 languages/norwegian/Makefile
 languages/portuguese/Makefile
 languages/spanish/Makefile
 languages/swedish/Makefile
 languages/porter/Makefile
 matcher/Makefile
 api/Makefile
 tests/Makefile
 docs/Makefile
 m4/Makefile
 autoconf/Makefile
 net/Makefile
 netprogs/Makefile
 getopt/Makefile
 xapian-config.nodep
 docs/doxygen_api_conf
 docs/doxygen_full_conf
 extra/Makefile
 xapian.spec
)

dnl for portability, files run through $CXXCPP must have extension .c .cc or .C
rm -f _xaptmp.cc
ln -s $srcdir/include/om/om.h.in _xaptmp.cc
$CXXCPP _xaptmp.cc|sed '/^\(# .*\)\?$/d;s/^%$//;s/  */ /g;s!^% !// !;s/^%/#/;s/%/__/g' > include/om/om.h.tmp
rm -f _xaptmp.cc
if cmp include/om/om.h.tmp include/om/om.h >/dev/null 2>&1 ; then
  rm include/om/om.h.tmp
else
  mv include/om/om.h.tmp include/om/om.h
fi
 
dnl need to AC_OUTPUT:
dnl bindings/Makefile
dnl bindings/python/Makefile
dnl bindings/perl5/Makefile
dnl bindings/guile/Makefile
dnl bindings/tcl8/Makefile
dnl bindings/php4/Makefile
dnl bindings/java/Makefile
dnl bindings/java/native/Makefile
dnl bindings/java/apitest_to_java.pl
dnl bindings/python/apitest_to_python.pl
dnl bindings/python/apitest_helpers.py
