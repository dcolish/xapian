#! @PERL_PATH@ -w
# @configure_input@
# apitest_to_python.pl is automatically generated from apitest_to_python.pl.in
# *** Do not edit the generated file ***
#
# apitest_to_python.pl.in - munge apitest.cc into a Python script
#
# ----START-LICENCE----
# Copyright 1999,2000 BrightStation PLC
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
# -----END-LICENCE-----

use strict;
use Carp;
use ToPython;
use apitest_parser;

my (@succeeded, @failed);
my (%want_name);
my ($want_allnames) = (1);

# FIXME: share most of this code with other language backends
$main::verbose = 0;

while (@ARGV) {
    $_ = shift @ARGV;
    if ($_ =~ /^-v$/) {
        $main::verbose = 1;
    } else {
        if ($_ !~ /^test_/) {
	    $_ = "test_" . $_;
	}
	$want_name{$_} = 1;
	$want_allnames = 0;
    }
}

open(OUTPUT, ">apitestfuncs.py") or die "Can't open apitestfuncs.py";
my $parser = new apitest_parser(new ToPython());
print OUTPUT $parser->make_comment("*** This file was autogenerated from apitest.cc by apitest_to_python.pl ***");
print OUTPUT $parser->preamble();

while (<STDIN>) {
    chomp;
    if (/$apitest_parser::func_start_regex/) {
	my $name = $1;
	if ($want_allnames || exists($want_name{$name})) {
	    my $funcdef;
	    eval {
		$funcdef = $parser->parse_function($_);
		if (defined $funcdef) {
		    print OUTPUT $funcdef;
		    $succeeded[$#succeeded+1] = $name;
		} else {
		    $failed[$#failed+1] = $name;
		}

#print $funcdef;
	    };
	    if ($@) {
		$failed[$#failed+1] = $name;

                print OUTPUT $parser->make_comment("*** UNTRANSLATED FUNCTION: $name");
		print STDERR "Parse of $name failed: $@\n";
	    }
	}
    }
}

print OUTPUT $parser->prologue();
print $#succeeded + 1, " successful translations: ", join(' ', @succeeded), "\n\n";
print $#failed + 1, " failed translations: ", join(' ', @failed), "\n";
