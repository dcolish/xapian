/* andnotpostlist.h: Return items which are in A, unless they're in B
 *
 * ----START-LICENCE----
 * Copyright 1999,2000,2001 BrightStation PLC
 * Copyright 2002 Ananova Ltd
 * Copyright 2003 Olly Betts
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 * -----END-LICENCE-----
 */

#ifndef OM_HGUARD_ANDNOTPOSTLIST_H
#define OM_HGUARD_ANDNOTPOSTLIST_H

#include "database.h"
#include "branchpostlist.h"
#include <algorithm>

/** A postlist generated by taking one postlist (the left-hand postlist),
 *  and removing any documents which are in the other (right-hand) postlist.
 *
 *  The weight for a posting is the weight in the left-hand postlist.
 */
class AndNotPostList : public BranchPostList {
    private:
        Xapian::docid lhead, rhead;

	/// Number of documents in the database this postlist is across
	Xapian::doccount dbsize;

        PostList *advance_to_next_match(Xapian::weight w_min, PostList *ret);
    public:
	Xapian::doccount get_termfreq_max() const;
	Xapian::doccount get_termfreq_min() const;
	Xapian::doccount get_termfreq_est() const;

	Xapian::docid  get_docid() const;
	Xapian::weight get_weight() const;
	Xapian::weight get_maxweight() const;

        Xapian::weight recalc_maxweight();

	PostList *next(Xapian::weight w_min);
	PostList *skip_to(Xapian::docid did, Xapian::weight w_min);
	bool   at_end() const;

	std::string get_description() const;

	/** Return the document length of the document the current term
	 *  comes from.
	 */
	virtual Xapian::doclength get_doclength() const;

        AndNotPostList(PostList *left,
		       PostList *right,
		       MultiMatch *matcher_,
		       Xapian::doccount dbsize_);

        PostList *sync_and_skip_to(Xapian::docid id,
				   Xapian::weight w_min,
				   Xapian::docid lh,
				   Xapian::docid rh);
};

inline Xapian::doccount
AndNotPostList::get_termfreq_max() const
{
    DEBUGCALL(MATCH, Xapian::doccount, "AndNotPostList::get_termfreq_max", "");
    // Max is when as many docs as possible on left, and none excluded.
    RETURN(l->get_termfreq_max());
}

inline Xapian::doccount
AndNotPostList::get_termfreq_min() const
{
    DEBUGCALL(MATCH, Xapian::doccount, "AndNotPostList::get_termfreq_min", "");
    // Min is when as few docs as possible on left, and maximum are excluded.
    Xapian::doccount l_min = l->get_termfreq_min();
    Xapian::doccount r_max = r->get_termfreq_max();
    if (l_min > r_max) RETURN(l_min - r_max);
    RETURN(0u);
}

inline Xapian::doccount
AndNotPostList::get_termfreq_est() const
{
    DEBUGCALL(MATCH, Xapian::doccount, "AndNotPostList::get_termfreq_est", "");
    // Estimate assuming independence:
    // P(l and r) = P(l) . P(r)
    // P(l not r) = P(l) - P(l and r) = P(l) . ( 1 - P(r))
    Xapian::doccount est = static_cast<Xapian::doccount>
	    (l->get_termfreq_est() *
	     (1.0 - static_cast<double>(r->get_termfreq_est()) / dbsize));

    RETURN(est);
}

inline Xapian::docid
AndNotPostList::get_docid() const
{
    DEBUGCALL(MATCH, Xapian::docid, "AndNotPostList::get_docid", "");
    RETURN(lhead);
}

// only called if we are doing a probabilistic AND NOT
inline Xapian::weight
AndNotPostList::get_weight() const
{
    DEBUGCALL(MATCH, Xapian::weight, "AndNotPostList::get_weight", "");
    RETURN(l->get_weight());
}

// only called if we are doing a probabilistic AND NOT
inline Xapian::weight
AndNotPostList::get_maxweight() const
{
    DEBUGCALL(MATCH, Xapian::weight, "AndNotPostList::get_maxweight", "");
    RETURN(l->get_maxweight());
}

inline Xapian::weight
AndNotPostList::recalc_maxweight()
{
    DEBUGCALL(MATCH, Xapian::weight, "AndNotPostList::recalc_maxweight", "");
    RETURN(l->recalc_maxweight());
}

inline bool
AndNotPostList::at_end() const
{
    DEBUGCALL(MATCH, bool, "AndNotPostList::at_end", "");
    RETURN(lhead == 0);
}

inline std::string
AndNotPostList::get_description() const
{
    return "(" + l->get_description() + " AndNot " + r->get_description() + ")";
}

inline Xapian::doclength
AndNotPostList::get_doclength() const
{
    DEBUGCALL(MATCH, Xapian::doclength, "AndNotPostList::get_doclength", "");
    RETURN(l->get_doclength());
}

#endif /* OM_HGUARD_ANDNOTPOSTLIST_H */
