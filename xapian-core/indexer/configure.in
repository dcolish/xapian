dnl Check for libxml.  We do this by looking for xml-config.
AC_PATH_PROG(XML_CONFIG_PATH, xml2-config)
if test -n "$XML_CONFIG_PATH"
then
  HAVE_LIBXML2=yes
  AC_DEFINE(HAVE_LIBXML2,, [ Define if libxml2 is available.])
else
  HAVE_LIBXML2=no
  AC_PATH_PROG(XML_CONFIG_PATH, xml-config)
fi

if test -n "$XML_CONFIG_PATH"
then
  AC_DEFINE(HAVE_LIBXML,,
    [ Define if libxml is available.])
fi
AM_CONDITIONAL(HAVE_LIBXML2, test "x$HAVE_LIBXML2" = xyes)

AC_ARG_ENABLE(validation,
[  --enable-validation     Enable XML validation (default=no)],
[case "${enableval}" in
  yes) use_xml_validation=true ;;
  no)  use_xml_validation=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-validation) ;;
esac;], [use_xml_validation=false])

if test -n "$XML_CONFIG_PATH"
then
  AC_DEFINE(HAVE_LIBXML,,
    [ Define if libxml is available.])
  AC_MSG_CHECKING([libxml flags])
  LIBXML_CFLAGS=`$XML_CONFIG_PATH --cflags`
  LIBXML_LIBS=`$XML_CONFIG_PATH --libs`
  AC_MSG_RESULT("$LIBXML_CFLAGS")
  AC_SUBST(LIBXML_CFLAGS)
  AC_SUBST(LIBXML_LIBS)
  if test "x$use_xml_validation" = "xtrue"
  then
    AC_LANG_SAVE
    AC_LANG_C
    SAVE_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS $LIBXML_CFLAGS"
    AC_TRY_COMPILE([
#include <parser.h>
#include <valid.h>
], [ xmlValidCtxt ctxt;
     xmlDocPtr doc;
     xmlValidateDocument(&ctxt, doc);
     ], [have_libxml_valid=yes], [have_libxml_valid=no])
    CFLAGS="$SAVE_CFLAGS"
    AC_LANG_RESTORE

    if test "x$have_libxml_valid" = "xyes"; then
      AC_DEFINE(HAVE_LIBXML_VALID,,
	  [ Define if libxml has validation available ])
    else
      AC_MSG_WARN(libxml doesn't have xmlValidateDocument: disabling validation.)
    fi
  fi
fi









if test -z "$XML_CONFIG_PATH"
  dnl Check for a POSIX regular expression library (so far only know rx)
  AC_CHECK_HEADER(rx/rxposix.h, [ HAVE_RX_RXPOSIX_H=yes ])
  AC_CHECK_HEADER(rxposix.h, [ HAVE_RXPOSIX_H=yes ])
  AC_CHECK_LIB(rx, regcomp, [ REGEX_LIB="-lrx" ])
  HAVE_REGEX_HEADER="$HAVE_RX_RXPOSIX_H$HAVE_RXPOSIX_H"
  AM_CONDITIONAL(HAVE_REGEX, [ test -n "$HAVE_REGEX_HEADER" -a -n "$REGEX_LIB" ])
  if test "x$HAVE_RXPOSIX_H" = "xyes"; then
  AC_DEFINE(HAVE_RXPOSIX_H,,
  	[ Define if <rxposix.h> is available ])
  fi
  if test "x$HAVE_RX_RXPOSIX_H" = "xyes"; then
  AC_DEFINE(HAVE_RX_RXPOSIX_H,,
  	[ Define if <rx/rxposix.h> is available ])
  fi
  AC_SUBST(REGEX_LIB)
  if test -z "$HAVE_REGEX_HEADER" -o -z "$REGEX_LIB"; then
  	AC_MSG_WARN(No POSIX regular expression library: some indexer nodes unavailable)
  fi
fi

AC_ARG_ENABLE(indexer,
[  --enable-indexer        Enable the indexing system (default=yes)],
[case "${enableval}" in
  yes) build_indexer=true ;;
  no)  build_indexer=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-indexer) ;;
esac],[build_indexer=true])


if test -z "$XML_CONFIG_PATH"; then
  if test "x$build_indexer" = "xtrue"; then
    AC_MSG_WARN(libxml not available, not building indexer support);
  fi
  build_indexer=false;
fi
AM_CONDITIONAL(BUILD_INDEXER, test x$build_indexer = xtrue)
	
AC_OUTPUT(
 indexer/Makefile
 indexer/indexgraph/Makefile
 indexer/indexgraph/make_register.pl
)
 for a in indexer/indexgraph/make_register.pl ; do
     test -r $a && chmod +x $a
 done
