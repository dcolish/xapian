New in 0.5:

VERY PROVISIONAL - HACKED TOGETHER OUT OF ChangeLog AND MY MEMORY...

* The project is now called "Xapian".

* Improved documentation.

* Renamed "om" to "xapian-core" and "om-examples" to "xapian-examples".
  Added "xapian-applications" which contains sample applications.

* OmData and OmKey removed - methods which used them now just take and return
  strings.

* Terminology change - "keys" are now known as "values", except when actually
  being used as a "key" - e.g. "match_collapse_key".

* Removed thread locks.  Rather than try to explicitly support multi-threaded
  use, we intended to be "thread-friendly".  Different threads can access
  different objects without problems.  In the rare event that you want
  to call methods on the same object from different threads at the same time,
  you'll have to perform the locking yourself.

* Indexgraph removed from core library.  It will reappear as an add-on library
  at some point.
  
* Cleaner build system.  Support for largefiles (>2G).  Builds as cleanly
  as we can achieve with GCC 2.95.* (some bogus warnings); Builds cleanly with
  GCC 3.0, and with GCC 3.1 snapshots.

* xapian-config no longer support "--uninst".  It's hard to make this
  work reliably, and the effort is better expended elsewhere.  Configure with
  a prefix and install to a temporary directory instead.

* Portability improvements.  Should now build "out of the box" on most Unix
  platforms.

* Removed problematic leak checking from testsuite.  We plan to use valgrind
  instead soon.

* Use GNU getopt for option parsing.

* Fixed a few matcher bugs: failing to correctly discard items from the
  proto-mset when it was full (which could result in incorrect search results);
  FilterPostList misbehaving; problems with boolean filters;
  mishandling when OR or ANDMAYBE decayed to AND; fixed OR in a pure boolean
  context.

* Added experimental match bias functors.

* Added experimental sorting within relevance bands to the matcher.

* Matcher now calculates percentages differently, such that 100% relevance is
  actually achievable.

* Matcher now uses a min-heap rather than nth-element to maintain the
  proto-mset.  This is cleaner and more efficient.

* Implemented multiple XOR queries.

* Add a new query operator, OP_WEIGHT_CUTOFF, which returns only
  those documents from a query which have a weight greater than a
  specified cutoff value.

* Removed the experimental sleepycat backend.

* Muscat 3.6 backends disabled by default.

* Removed OmBatchEnquire from system: it may return at a later date,
  but for now it is simply out of date and a maintainance liability,
  and gives no significant advantage.

* OmDocumentContents and OmIndexDoc merged into OmDocument.

* Lots more test cases in the test suite.

* Implemented deleting of items from postlists.

* Omega's query parser has now been reworked as a separate library.

* Many fixes and improvements in remote backend.

* Many fixes and improvements to Quartz backend.

* Fixes and improvements to inmemory backend.

* New operator OP_ELITE_SET replaces match_max_or_terms option.

* FIXME: lots more prior to:

* OmQuery interface cleaned up.

* In Muscat3.6 backends, don't read the key from the keyfile unless
  keyno is 0.

* Our iterators now have default constructors, making use easier.

* Assorted changes to many API classes.  Almost all have reference counted
  internals, so assignment and copying are cheap.

* Replaced om_termname_list with OmTermIterator.

* OmESetItem replaced by OmESetIterator; OmMSetItem replaced by OmMSetIterator.

* OmDocumentTerm and OmDocumentParams removed.

* Replace OmMSet::mbound with
  OmMSet::matches_{lower_bound,estimated,upper_bound}, giving more
  useful information.

* Fix bug in expander due to nth_element being called on the wrong
  element.  This is the counterpoint of the bug fixed on Nov 24th
  with the matcher.
