ToDo items on the coding side.
(Not a complete list)

Near term (within a fortnight)
=========================

Split database definition files into database/postlist/termlist files.

Make all debugging printf / cout stuff occur iff MUS_DEBUG_VERBOSE is defined.

Rename TextfileDatabase (to DynamicDatabase?) - indexer is all that is Textfile.

Write proper weighting formula for termlists, so expand works correctly.

Make all databases inherit from IndexerDestination.

Add tags to all files so can add licences easily.

Expose positional information in postlists in a consistent way.

Make postlists expose positional information
(extra methods / get_positionlist() method)

Implement phrase searching. - AND postlist, scan through positionlist
for sequential positions.

Document how each function should work in database, and what it should do in
error conditions (when things should be Asserted / when exceptions should
be thrown / when error condition should be returned.)
Do same for postlists, termlists, documents, matcher, etc.

Middle term (within a couple of months)
============================

Write an Enquire object to make a consistent exported searching interface.

Make the sleepycat database function (at all).

Passage retrieval.

Other search functions (collapse, sort, cluster).

Extend introspection methods to cover all objects.

Make gui demo display text being searched.

Write (speed) performance test suite.

Sanify and implement introspection methods - get_database_path, etc.
Should be able to get entire state of database by introspection.

Long term
=========

Write indexer modules.

Make backends / weighting schemes / indexer modules register themselves
automatically.  At runtime / linktime?
(ie, replace current conditional compilation scheme)

Distributed searching (distributed enquire objects).
