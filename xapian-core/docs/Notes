Asserts: should be put in place to ensure correct usage.  If the assert isn't
there, segfaults should not result, unless the condition is specifically
prohibited in documentation.  Segfaults should not result when reading from
files, or other data streams, even if Asserts are turned off.

Optimisation:  Consider using hash_map instead of map in various places -
two possible such locations are i) doing collapsem (in match.cc) and ii)
in the inmemory databse.

=====================

Table for result of operations when one of the operands is undefined (0):

            | a,b                           | a,0 | 0,b | 0,0 |
 -----------+-------------------------------+-----+-----+-----+
  OR        | a or b                        |  a  |  b  |  0  | 
  AND       | a and b                       |  a  |  b  |  0  |
  FILTER    | a and b (just weights from a) |  a  |  b* |  0  |
  AND_MAYBE | a (extra weights from b)      |  a  |  b  |  0  |
  AND_NOT   | a but not b                   |  a  | n/a | n/a |
  XOR       | (a or b) not (a and b)        | n/a | n/a |  0  |
 -----------+-------------------------------+-----+-----+-----+

* - this represents a pure boolean query - all weights will be 1

=====================

Table describing effect of building a query with boolean subqueries:
(NOTE: This is unimplemented, and is what should probably happen if
it ever is.  The current behaviour is that any pure boolean subquery
throws an exception, and it's not clear that it's worth adding the
code to check for special cases where it might make sense.)

              | result when        | result when    | result when
operation     | a is bool          | b is bool      | a and b bool
--------------+--------------------+----------------+--------------
a OR b        | exception          | exception      | bool (a OR b)
a AND b       | b FILTER a         | a FILTER b     | bool (a AND b)
	      | vector of ANDs -> split into pure bool and prob. parts,
	      | and FILTER the two trees.
a FILTER b    | bool (a AND b)     | ok             | bool (a AND b)
a AND_MAYBE b | exception          | exception      | exception
a AND_NOT b   | bool (a AND_NOT b) | ok             | bool (a AND_NOT b)
a XOR b       | exception          | exception      | bool (a XOR b)

"bool (a OP b)" means the query (a OP b) with the bool flag set.
The exception thrown in invalid cases is OmInvalidArgumentError.

=====================
PostList::next()

In the normal case this returns a NULL PostList pointer.  This is actually
used by the branch post lists to simplify the PostList trees.  Sometimes a
branch postlist P will return a pointer to a different postlist to replace
it.  P's parent will notice, and replace its pointer to P with the
returned pointer, which can be either one of P's children, or another
branch.  P will be deleted.

=====================
Document ids (docid) start from 1 - a zero docid is invalid.  This is relied
on by some operations.
