<todo>
<todoitem priority="H" difficulty="2" owner="" area="Matcher">

Pass around partially created postlist as an auto_ptr, for exception safety.

</todoitem>
<todoitem priority="H" difficulty="3" owner="" area="General / API">

Put Om into its own namespace, to ensure lack of symbol conflicts.

</todoitem>
<todoitem priority="H" difficulty="5" owner="C" area="API">

Write bindings for other languages (Java, C, perl, python, etc.). [In
progress, apart from C].

</todoitem>
<todoitem priority="H" difficulty="5" owner="" area="Performance">

Write (speed) performance test suite.

</todoitem>
<todoitem priority="H" difficulty="5" owner="O" area="API">

Merge OmDocument and OmDocumentContents into a single class, providing
consistent interface.

</todoitem>
<todoitem priority="H" difficulty="5" owner="C" area="Indexer">

Write indexer modules.

</todoitem>
<todoitem priority="H" difficulty="3" owner="" area="Quartz">

Get a lock on database when writing, to prevent accidental multiple
writers (which would result in a corrupt database).

</todoitem>
<todoitem priority="H" difficulty="3" owner="" area="Quartz">

Detect and deal with btree overwritten condition.  Write tests to ensure
this works.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Quartz">

Implement deletion and updating of documents.  Test.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="API">

Test that optimisations are not causing wrong results to be returned.  Have a
large dataset, and a query which returns at least 20 hits.  Perform queries
with all possible combinations of first item and mset size, and check that the
returned results are consistent.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="API">

Rename AutoPtr to OmAutoPtr, and autoptr.h to omautoptr.h (or think
of a suitable alternative scheme for avioding exposing the autoptrs).

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Matcher">

Write tests to check that setting the parameters used in the BM25 and
traditional weighting schemes works.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Exceptions">

Make exceptions threadsafe: see
http://metalab.unc.edu/pub/Linux/docs/faqs/SMP-FAQ GCC (and EGCS) need
existence of exceptions to be protected by a mutex - will need to cope with
exception being copied.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Exceptions">

Add context to errors, particularly those generated by a remote database
failing, so that the source of the error can be identified.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher">

Implement collapse keys for duplicate removal - which only fire if the
two documents have the same weight.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Exceptions">

Make net/omerr_string.c include om/omerrortypes.h, and use its own
#defines to process this file appropriately, so that all error types can
be dealt with.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Exceptions">

Add error handlers to (at least) OmDatabase.  Implement more carefully in
MergePostlist.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher">

Check that negative term weights don't mess up matcher's optimisations - if
they do we need to either disallow negative term weights, or fix/disable the
optimisations for the case of negative term weights.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Documentation">

Patch doxygen, so that todo items in the body of methods get displayed.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher">

Test performance when nth_element is run more or less frequently, to see
what is best.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="General">

Check that it is safe for an exception to be thrown and caught within a
destructor, when that destructor is being called due to an exception
unwinding the stack.  eg, a database is destroyed due to an exception,
database's destructor calls internal_end_session() which throws an exception
(which is caught and handled by the destructor): is this safe - two
exceptions exist simultaneously.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Exceptions">

Make exceptions work with shared libs on solaris / find an alternative. (gcc
=> DISABLE_SHARED on Solaris)

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="Options">

Use OmSettings for specifying what debugging info to output

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Documentation">

Ensure that API documentation covers entirety of API.  Then rewrite it for
clarity.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Documentation">

Document backend API (database, postlist, termlist, document, etc) in same
way as enquire API.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Bindings">

Ensure that (Java in particular) bindings throw correct exception types.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Stemming">

Make a separate package to contain stemming algorithm stuff (docs, code,
stemtest)

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Databases">

Change all internal references to net/network backend to remote backend (in
step with external naming)

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Databases">

Make references to muscat36/m36 consistent (may require externally visible
changes)

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="DA backend">

Autodetect heavy-duty vs flimsy (3 byte vs 2 byte)

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher">

Treat FILTER and AND as equivalent from the point of view of building
optimal AND trees.  Also add a variant on FilterPostList where the left
branch is boolean and the right probabilistic.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher">

max_or_terms should probably work in a more local way.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Matcher">

max_or_terms should not select groups of terms which don't match any
documents.

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="Matcher">

max_or_terms should probably reduce the querysize by the number of terms
removed - hard to do because max_or_terms necessarily happens after some
term weights have been calculated...

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Purify">

Write autoconf macro to turn on purify support. Submit to
http://peti.cys.de/autoconf-archive/

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Documentation">

Add notes about catching exceptions throughout userman, particularly in
examples (eg, search engine example)

</todoitem>
<todoitem priority="L" difficulty="3" owner="c" area="Backends">

Use thread locks around inmemory methods

</todoitem>
<todoitem priority="L" difficulty="2" owner="" area="Website">

Put PS/PDF documentation on website.

</todoitem>
<todoitem priority="L" difficulty="5" owner="c" area="General">

Audit for exception safety.

</todoitem>
<todoitem priority="L" difficulty="4" owner="R" area="Positional">

Add a get_position_list() method to databases.
Change OmDatabase::positionlist_{begin,end} to use it.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Weighting">

Allow for a non-zero minimum value for the ndl (normalised doc len).

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Positional">

Passage retrieval.

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Matcher">

Clustering algorithms.

</todoitem>
<todoitem priority="V" difficulty="5" owner="" area="General">

Improve performance using SIMD instructions

</todoitem>
<todoitem priority="V" difficulty="4" owner="" area="General">

Make backends / weighting schemes / indexer modules register themselves
automatically.  At runtime / linktime? (ie, replace current conditional
compilation scheme)

</todoitem>
<todoitem priority="V" difficulty="3" owner="" area="Backends">

Split database definition files into database/postlist/termlist files.

</todoitem>
<todoitem priority="V" difficulty="4" owner="" area="General">

A couple of classes get copied a lot - look into doing copy-on-write for
them.  Notably ExpandBits and term names (currently strings so this happens,
but may change)

</todoitem>
<todoitem priority="D" difficulty="3" owner="" area="API">

Do allow boolean subqueries in OmQuery constructors, where
it makes sense (or note in documentation to use FILTER).

</todoitem>
<todoitem priority="D" difficulty="5" owner="" area="Matcher">

Boolean filters result in collection statistics being for the wrong set of
documents (should be appropriate subset).  Hard to be efficient

</todoitem>
</todo>
