<todo>
<todoitem priority="M" difficulty="5" owner="" area="Debug" release="">

Try to find some way to write a thread identifier into the debug log, while
not depending of pthreads.  Try dlsym() on pthread_self?
(pthread_t pthread_self(void)).

</todoitem>
<todoitem priority="H" difficulty="2" owner="" area="Matcher" release="">

Pass around partially created postlists and termlists as AutoPtrs?
(for exception safety)

</todoitem>
<todoitem priority="H" difficulty="3" owner="" area="General / API" release="">

Put Om into its own namespace, to ensure lack of symbol conflicts.

</todoitem>
<todoitem priority="H" difficulty="5" owner="C" area="API" release="">

Write bindings for other languages (Java, C, perl, python, php4, etc.). [In
progress, apart from C].

</todoitem>
<todoitem priority="H" difficulty="5" owner="" area="Performance" release="">

Write (speed) performance test suite.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="General" release="1.0">

Check for zero byte cleanness wherever strings are used.  There are a
number of c_str()s in the code, but I believe all in the core library
(excluding the bindings) are harmless at 2002-04-29.  There may be other zero
byte issues though.

</todoitem>
<todoitem priority="M" difficulty="1" owner="" area="Iterators" release="">

Write tests for copying term and postlist iterators.

</todoitem>
<todoitem priority="M" difficulty="1" owner="" area="API" release="1.0">

The word "key" already has a widely understood meaning which isn't quite
in line with an OmKey, so perhaps we should rename OmKey to avoid confusiorn?
OmKey -&gt; OmAttrib / OmAttribute / OmAttr / OmFacet / ... ?

</todoitem>
<todoitem priority="M" difficulty="1" owner="" area="DA/DB" release="1.0">

Add get_all_terms DB databases.  Needs extra code in dbread.[ch].

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="General" release="1.0">

Allow setting of the document length in OmDocument.  (Currently defined to
be the sum of the wdfs).

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="General" release="">

Make all errors return a context if appropriate.

</todoitem>
<todoitem priority="M" difficulty="5" owner="James" area="Porting" release="1.0">

Produce Microsoft Windows version, probably cross-compiling to mingw.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="API" release="">

Implement methods to iterate through all the documents in the database.
Possibly via a special term which indexes all documents.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Matcher" release="">

Write tests to check that setting the parameters used in the BM25 and
traditional weighting schemes works.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher" release="">

Implement collapse keys for duplicate removal - which only fire if the
two documents have the same weight.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher" release="">

Check that negative term weights don't mess up matcher's optimisations - if
they do we need to either disallow negative term weights, or fix/disable the
optimisations for the case of negative term weights.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Documentation" release="">

Patch doxygen, so that todo items in the body of methods get displayed.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="General" release="">

Check that it is safe for an exception to be thrown and caught within a
destructor, when that destructor is being called due to an exception
unwinding the stack.  eg, a database is destroyed due to an exception,
database's destructor calls internal_end_session() which throws an exception
(which is caught and handled by the destructor): is this safe - two
exceptions exist simultaneously.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Exceptions" release="">

Make exceptions work with shared libs on solaris / find an alternative. (gcc
=&gt; DISABLE_SHARED on Solaris)

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="OmSettings" release="">

Add serialisation methods to OmSettings, and use them instead of simply
serialising those entries of the settings object that are desired, when
passing match options over the network.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="OmQuery" release="">

Move all serialisation of OmQuery into OmQuery (out of socketcommon.cc and
localmatch): modification of omquery requires changes in 3 separate parts
of the code, at present.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Documentation" release="1.0">

Ensure that API documentation covers entirety of API (i.e. that all methods and
classes in the API have documentation comments) -- see doxygen generated file
docs/doxygen_api_warnings for a list of undocumented methods.  Then read
through generated API docs, and rewrite doc comments to improve clarity and
mahe them more coherent.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher" release="">

Create a synonym postlist, which represents a set of postlists merged together,
such that each document that occurs in any of the sublists occurs in the list,
the term freqency is the number of documents that one or more of the terms
occurs in, and the term weight corresponds.

Will need approximation schemes for determining the term frequency.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Documentation" release="">

Document backend API (database, postlist, termlist, document, etc) in same
way as enquire API.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Bindings" release="">

Ensure that (Java in particular) bindings throw correct exception types.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher" release="">

Allow negative relevance judgements?  Will need to check that this doesn't
cause assumptions to be violated. (eg, unsigned integers going negative.)

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Stemming" release="">

Replace our own stemming code with Martin Porter's snowball stemmers (with a
thin OmStem wrapper).

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Databases" release="">

Change all internal references to net/network backend to remote backend (in
step with external naming)

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="DA backend" release="">

Autodetect heavy-duty vs flimsy (3 byte vs 2 byte)

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher" release="">

Treat FILTER and AND as equivalent from the point of view of building
optimal AND trees.  Also add a variant on FilterPostList where the left
branch is boolean and the right probabilistic.  Resist urge to call
it RETFIL.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Quartz" release="">

Clean up interaction of AllTermsIterator for quartz with QuartzPostList.
Need QuartzPostListTermsIterator class?  (But with a snappier name. ;-) )

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Quartz" release="">

Make quartz database autoflush when enough changes have been performed based
on the memory used up as a proportion of that available, rather than simply
when a count of changes is reached.  Remove hardcoded count of 1000 changes.

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="API" release="">

Allow custom weighting functions.

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="API" release="">

Provide fake term which indexes all documents.  This would be used for a
real "NOT" operator, and also for allowing searches to be scored based on
location (would give weight from location for this term, with a custom
weighting scheme).

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="API" release="">

Provide explicit support for range searches.

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Matcher" release="">

OP_ELITE_SET should never select groups of terms which don't match any
documents.  (Currently, will exclude those for which termfreq_max() is 0,
but this may still result in a bad choice)

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="Matcher" release="">

OP_ELITE_SET should probably reduce the querysize by the number of terms
removed.  When making a contribution to querysize, could just use the lesser
of the number of terms, and elite_set_size.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Documentation" release="1.0">

Add notes about catching exceptions throughout userman, particularly in
examples (eg, search engine example)

</todoitem>
<todoitem priority="L" difficulty="2" owner="" area="Website" release="">

Put PS/PDF documentation on website.

</todoitem>
<todoitem priority="L" difficulty="5" owner="c" area="General" release="">

Audit for exception safety.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="API" release="">

Re-implement OmBatchEnquire, and add back into the system.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Weighting" release="">

Allow for a non-zero minimum value for the ndl (normalised doc len).

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Positional" release="">

Passage retrieval.

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Matcher" release="">

Clustering algorithms.

</todoitem>
<todoitem priority="V" difficulty="5" owner="" area="General" release="">

Improve performance using SIMD instructions

</todoitem>
<todoitem priority="V" difficulty="4" owner="" area="General" release="">

Make backends / weighting schemes / indexer modules register themselves
automatically.  At runtime / linktime? (ie, replace current conditional
compilation scheme)

</todoitem>
<todoitem priority="V" difficulty="3" owner="" area="Backends" release="">

Split database definition files into database/postlist/termlist files.

</todoitem>
<todoitem priority="V" difficulty="4" owner="" area="General" release="">

A couple of classes get copied a lot - look into doing copy-on-write for
them.  Notably ExpandBits and term names (currently strings so this happens,
but may change)

</todoitem>
<todoitem priority="D" difficulty="3" owner="" area="Exceptions" release="">

Add error handlers to (at least) OmDatabase.  Implement more carefully in
MergePostlist.

</todoitem>
<todoitem priority="D" difficulty="3" owner="" area="Decision functors" release="">

Return a sensible value for OmMSet::matches_lower_bound when a decision
functor is present.  This has to be the number of documents that the decision
functor tested and approved, as we know there are at least that many and
can't know if there are more.  matches_upper_bound can be reduced by the
number of documents that the functor rejected, and matches_estimated
can be adjusted somehow - perhaps look at the reject rate of the functor?
Partly done I believe.

</todoitem>
<todoitem priority="D" difficulty="3" owner="" area="API" release="">

Do allow boolean subqueries in OmQuery constructors, where
it makes sense (or note in documentation to use FILTER).

</todoitem>
<todoitem priority="D" difficulty="5" owner="" area="Matcher" release="">

Boolean filters result in collection statistics being for the wrong set of
documents (should be appropriate subset).  Hard (impossible?) to implement
efficiently.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="Quartz" release="1.0">

Ensure that quartz databases don't have a problem if there is no positional
information entry available for a term / document combination.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher" release="">

Add synonym postlists.  Need to be able to take underlying postlists which
aren't neccessarily just postlists for single terms, and to be able to
estimate termfrequency of combined postlists.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Postlists" release="">

Add get_termfreq_exact() methods, for calculating the exact termfreq.  This
will be particularly useful when trying to do evaluations to check up on the
approximations being made.

Also, add get_termfreq_better_est() methods, which give an approximation to the
exact termfreq based on the first N items in the postlist.

This may require adding a reset() method, to move a postlist's position back to the beginning.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Postlists" release="">

Add OP_FILTER_TERM_WITH_EXACT_WEIGHT query operator (with better name), which
will perform a restriction of the LHS term based on the RHS query, but use the
exact termfrequency for the combined term to calculate the weight.  This will
share some techniques from implementing synonym postlists.

</todoitem>
<todoitem priority=" " difficulty="" owner="" area="" release="">

"make install" on omega should install CGI binary somewhere more helpful

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

.deb and RPMs built, control files via autoconf

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

largefiles should get a better autoconf check?
Propose: move to require autoconf >= 2.50 in the medium term as it includes
better largefile checks, and should resolve this.

</todoitem>
<todoitem priority=" " difficulty="" owner="Sam/James" area="" release="">

Language bindings: Python, PHP and Java (as a minimum IMHO).
All can be done using SWIG, and it's probably easier to do so
even though some languages (eg Python) have better tools
available just because it's less overall work.

</todoitem>
<todoitem priority=" " difficulty="" owner="" area="" release="">

indexgraph -> extra (needs to build as a support library?)

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Reduce use of STL in API; Olly has a plan for std::string

</todoitem>
<todoitem priority=" " difficulty="" owner="" area="" release="">

Should Omega have a make static target?  Or just document configure runes?
Need some more stuff in
omindex (--add-term, --add-field) IMHO. Also could do with more
fields as standard, and probably support for subsite as key for
collapse.

</todoitem>
<todoitem priority=" " difficulty="" owner="Sam" area="" release="">

Replace Omega with a simpler PHP or Python-based
system, once the bindings are in place. Python would be good
because we could use it for omindex as well, and I suspect the code
would be much cleaner, easier to work with, and generally
understandable. For something that should be halfway between a
reasonably large-scale application for Xapian and a complex
example, this can only be a good thing. This probably needs a
query parser library, although it raises questions of consistency
of term generation (word breaks and stemming) across the index
and query tools ... we may want the query parser to have a callback
to deal with that, which can be done in the bindings although it's
a little fiddly in some languages I believe.

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Fix up examples and make sure they are actually instructive.
I've made a start.  delve is a reasonable example.  msearch probably needs
simplifying to just do a probabilistic search, or to use the omega queryparser
once it moves into extra.

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Investigate and find a proper fix for FILTER problem.

</todoitem>
<todoitem priority=" " difficulty="" owner="Richard" area="" release="">

Look at replacing btree implementation, or at least tidying it

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Need to ensure getopt.c and getopt1.c get linked against
anything that needs them for non-glibc platforms.

</todoitem>
<todoitem priority=" " difficulty="" owner="James" area="" release="">

Automated testing across CF machines

</todoitem>
<todoitem priority=" " difficulty="" owner="James" area="" release="">

I have some fixes for linux/alpha build, but they're somewhere in a
pile of paper on my desk. I'll dig them out and test at some point

</todoitem>
<todoitem priority=" " difficulty="" owner="James" area="" release="">

Update the PLATFORMS file

</todoitem>
<todoitem priority=" " difficulty="" owner="" area="" release="">

We talked about use of local vs global databases, and decided it
would be useful to support Unix sockets for local machine databases
so the library can select() on all databases in complex cases. This
is probably something we can leave for a while, and probably
doesn't need to be automatic - so the local process can be fired
by the application, not the library - but at some point should be
thought through and documented properly.  A longer term project.

</todoitem>
<todoitem priority=" " difficulty="" owner="James" area="" release="">

xapian.org: schema pages (not crucial, but would be nice)

</todoitem>
<todoitem priority=" " difficulty="" owner="James" area="" release="">

make sure the non-autogenerated docs are actually correct at the moment

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Use valgrind in the testsuite - waiting for Julian Seward to add the hooks
needed.

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Replace all uses of OmSettings.
The arguments for OmSettings are not as compelling as we
originally thought, and it has definite drawbacks - one major one being
that there's no easy way to check for typos which can lead to users of
the library spending hours trying to sort out a bug which is just a
typo in an OmSettings value.  Another arugment for it was to allow passing
values to user weighting objects, etc, but I think it's best just to
implement these with a clone() method, and pass an example one in.  And
we might as well make built-in weighting objects work the same way rather
than being a special case.  Backends can be done similarly, though an
explicit factory is needed as there's more than one class to build.

</todoitem>
<todoitem priority=" " difficulty="" owner="James" area="" release="">

Get nightly snapshot builds set up again

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Look at getting the btree code to use pread and pwrite or similar calls 
where available (e.g. on Linux and Solaris).  These combine a seek and
read or write into a single syscall, which halves the syscall overhead and
can make an observable difference to performance.

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Think about using hashing instead of a btree for the backend?  Long term
project.

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Move "min_hits" into matcher?

</todoitem>
<todoitem priority=" " difficulty="" owner="Olly" area="" release="">

Look at reworking StatsGatherer mechanism to be simpler and clearer.

</todoitem>
</todo>
