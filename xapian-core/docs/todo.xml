<todo>
<todoitem priority="H" difficulty="2" owner="" area="Matcher" release="">

Pass around partially created postlist as an auto_ptr, for exception safety.

</todoitem>
<todoitem priority="H" difficulty="3" owner="" area="General / API" release="">

Put Om into its own namespace, to ensure lack of symbol conflicts.

</todoitem>
<todoitem priority="H" difficulty="5" owner="C" area="API" release="">

Write bindings for other languages (Java, C, perl, python, etc.). [In
progress, apart from C].

</todoitem>
<todoitem priority="H" difficulty="5" owner="" area="Performance" release="">

Write (speed) performance test suite.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="General" release="1.0">

Check behaviour when positionlists are empty, particularly in quartz.
Test what happens if:  a positionlist is requested for a term which exists
but has no positions.  A positionlist is request for a term which does
not exist at all.  A document is inserted with a positionlist, then modified
so that there is no positionlist, and then the positionlist is requested.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="General" release="1.0">

Check for zero byte cleanness wherever strings are used.  There are a lot
of c_str()s in the code...

</todoitem>
<todoitem priority="M" difficulty="1" owner="" area="Iterators" release="">

Write tests for copying term and postlist iterators.

</todoitem>
<todoitem priority="M" difficulty="1" owner="" area="DA/DB" release="1.0">

Rename keys to attributes.  (OmKey -&gt; OmAttrib / OmAttribute / OmAttr ?)
Latest suggestion: OmFacet

</todoitem>
<todoitem priority="M" difficulty="1" owner="" area="DA/DB" release="1.0">

Add get_all_terms DB databases.  Needs extra code in dbread.[ch].

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="OmQuery" release="1.0">

Make query operator to filter on percentage weight work.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="General" release="1.0">

Allow setting of the document length in OmDocument.  (Currently defined to
be the sum of the wdfs).

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="General" release="">

Make all errors return a context if appropriate.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Porting" release="1.0">

Produce NT version of OM.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="API" release="">

Implement methods to iterate through all the documents in the database.
Possibly via a special term which indexes all documents.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Quartz" release="1.0">

Implement deletion and updating of documents.  Test.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="API" release="">

Test that optimisations are not causing wrong results to be returned.  Have a
large dataset, and a query which returns at least 20 hits.  Perform queries
with all possible combinations of first item and mset size, and check that the
returned results are consistent.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Matcher" release="">

Write tests to check that setting the parameters used in the BM25 and
traditional weighting schemes works.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Exceptions" release="">

Make exceptions threadsafe: see
http://metalab.unc.edu/pub/Linux/docs/faqs/SMP-FAQ GCC (and EGCS) need
existence of exceptions to be protected by a mutex - will need to cope with
exception being copied.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher" release="">

Implement collapse keys for duplicate removal - which only fire if the
two documents have the same weight.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher" release="">

Check that negative term weights don't mess up matcher's optimisations - if
they do we need to either disallow negative term weights, or fix/disable the
optimisations for the case of negative term weights.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Documentation" release="">

Patch doxygen, so that todo items in the body of methods get displayed.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="General" release="">

Check that it is safe for an exception to be thrown and caught within a
destructor, when that destructor is being called due to an exception
unwinding the stack.  eg, a database is destroyed due to an exception,
database's destructor calls internal_end_session() which throws an exception
(which is caught and handled by the destructor): is this safe - two
exceptions exist simultaneously.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Exceptions" release="">

Make exceptions work with shared libs on solaris / find an alternative. (gcc
=&gt; DISABLE_SHARED on Solaris)

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="Options" release="">

Use OmSettings for specifying what debugging info to output.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="OmSettings" release="">

Add serialisation methods to OmSettings, and use them instead of simply
serialising those entries of the settings object that are desired, when
passing match options over the network.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="OmQuery" release="">

Move all serialisation of OmQuery into OmQuery (out of socketcommon.cc and
localmatch): modification of omquery requires changes in 3 separate parts
of the code, at present.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Documentation" release="1.0">

Ensure that API documentation covers entirety of API (i.e. that all methods and
classes in the API have documentation comments).  Then rewrite it for clarity.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher" release="">

Create a synonym postlist, which represents a set of postlists merged together,
such that each document that occurs in any of the sublists occurs in the list,
the term freqency is the number of documents that one or more of the terms
occurs in, and the term weight corresponds.

Will need approximation schemes for determining the term frequency.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Documentation" release="">

Document backend API (database, postlist, termlist, document, etc) in same
way as enquire API.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Bindings" release="">

Ensure that (Java in particular) bindings throw correct exception types.

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher" release="">

Allow negative relevance judgements.  Will need to check that this doesn't
cause assumptions to be violated. (eg, unsigned integers going negative.)

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Stemming" release="">

Make a separate package to contain stemming algorithm stuff (docs, code,
stemtest)

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Databases" release="">

Change all internal references to net/network backend to remote backend (in
step with external naming)

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="DA backend" release="">

Autodetect heavy-duty vs flimsy (3 byte vs 2 byte)

</todoitem>
<todoitem priority="M" difficulty="4" owner="" area="Matcher" release="">

Treat FILTER and AND as equivalent from the point of view of building
optimal AND trees.  Also add a variant on FilterPostList where the left
branch is boolean and the right probabilistic.  Resist urge to call
it RETFIL.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Threads" release="">

Make ./configure --enable-mutex-errcheck compile on more systems: need
configure check for pthread_mutexattr_settype()

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Quartz" release="">

Clean up interaction of AllTermsIterator for quartz with QuartzPostList.
Need QuartzPostListTermsIterator class?  (But with a snappier name. ;-) )

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Quartz" release="">

Make quartz database autoflush when enough changes have been performed based
on the memory used up as a proportion of that available, rather than simply
when a count of changes is reached.  Remove hardcoded count of 1000 changes.

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="API" release="">

Databases should return postlists and termlists as AutoPtrs, rather than
pointers.

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="API" release="">

Allow custom weighting functions.

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="API" release="">

Provide fake term which indexes all documents.  This would be used for a
real "NOT" operator, and also for allowing searches to be scored based on
location (would give weight from location for this term, with a custom
weighting scheme).

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="API" release="">

Provide explicit support for range searches.

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Matcher" release="">

OP_ELITE_SET should never select groups of terms which don't match any
documents.  (Currently, will exclude those for which termfreq_max() is 0,
but this may still result in a bad choice)

</todoitem>
<todoitem priority="L" difficulty="4" owner="" area="Matcher" release="">

OP_ELITE_SET should probably reduce the querysize by the number of terms
removed.  When making a contribution to querysize, could just use the lesser
of the number of terms, and elite_set_size.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Purify" release="">

Write autoconf macro to turn on purify support. Submit to
http://peti.cys.de/autoconf-archive/

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Documentation" release="1.0">

Add notes about catching exceptions throughout userman, particularly in
examples (eg, search engine example)

</todoitem>
<todoitem priority="L" difficulty="3" owner="c" area="Backends" release="">

Use thread locks around inmemory methods

</todoitem>
<todoitem priority="L" difficulty="2" owner="" area="Website" release="">

Put PS/PDF documentation on website.

</todoitem>
<todoitem priority="L" difficulty="5" owner="c" area="General" release="">

Audit for exception safety.

</todoitem>
<todoitem priority="L" difficulty="4" owner="R" area="Positional" release="">

Test get_position_list() methods on databases.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="API" release="">

Re-implement OmBatchEnquire, and add back into the system.

</todoitem>
<todoitem priority="L" difficulty="3" owner="" area="Weighting" release="">

Allow for a non-zero minimum value for the ndl (normalised doc len).

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Positional" release="">

Passage retrieval.

</todoitem>
<todoitem priority="L" difficulty="5" owner="" area="Matcher" release="">

Clustering algorithms.

</todoitem>
<todoitem priority="V" difficulty="5" owner="" area="General" release="">

Improve performance using SIMD instructions

</todoitem>
<todoitem priority="V" difficulty="4" owner="" area="General" release="">

Make backends / weighting schemes / indexer modules register themselves
automatically.  At runtime / linktime? (ie, replace current conditional
compilation scheme)

</todoitem>
<todoitem priority="V" difficulty="3" owner="" area="Backends" release="">

Split database definition files into database/postlist/termlist files.

</todoitem>
<todoitem priority="V" difficulty="4" owner="" area="General" release="">

A couple of classes get copied a lot - look into doing copy-on-write for
them.  Notably ExpandBits and term names (currently strings so this happens,
but may change)

</todoitem>
<todoitem priority="D" difficulty="3" owner="" area="Exceptions" release="">

Add error handlers to (at least) OmDatabase.  Implement more carefully in
MergePostlist.

</todoitem>
<todoitem priority="D" difficulty="3" owner="" area="Decision functors" release="">

Return a sensible value for OmMSet::matches_lower_bound when a decision
functor is present.  This has to be the number of documents that the decision
functor tested and approved, as we know there are at least that many and
can't know if there are more.  matches_upper_bound can be reduced by the
number of documents that the functor rejected, and matches_estimated
can be adjusted somehow - perhaps look at the reject rate of the functor?

</todoitem>
<todoitem priority="D" difficulty="3" owner="" area="API" release="">

Do allow boolean subqueries in OmQuery constructors, where
it makes sense (or note in documentation to use FILTER).

</todoitem>
<todoitem priority="D" difficulty="5" owner="" area="Matcher" release="">

Boolean filters result in collection statistics being for the wrong set of
documents (should be appropriate subset).  Hard (impossible?) to implement
efficiently.

</todoitem>
<todoitem priority="M" difficulty="2" owner="" area="Quartz" release="1.0">

Ensure that quartz databases don't have a problem if there is no positional
information entry available for a term / document combination.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Matcher" release="">

Add synonym postlists.  Need to be able to take underlying postlists which
aren't neccessarily just postlists for single terms, and to be able to
estimate termfrequency of combined postlists.

</todoitem>
<todoitem priority="M" difficulty="5" owner="" area="Postlists" release="">

Add get_termfreq_exact() methods, for calculating the exact termfreq.  This
will be particularly useful when trying to do evaluations to check up on the
approximations being made.

Also, add get_termfreq_better_est() methods, which give an approximation to the
exact termfreq based on the first N items in the postlist.

This may require adding a reset() method, to move a postlist's position back to the beginning.

</todoitem>
<todoitem priority="M" difficulty="3" owner="" area="Postlists" release="">

Add OP_FILTER_TERM_WITH_EXACT_WEIGHT query operator (with better name), which
will perform a restriction of the LHS term based on the RHS query, but use the
exact termfrequency for the combined term to calculate the weight.  This will
share some techniques from implementing synonym postlists.

</todoitem>
</todo>
