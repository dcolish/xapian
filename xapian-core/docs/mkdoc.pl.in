#! @PERL_PATH@ -w
# @configure_input@
# mkdoc.pl is automatically generated from mkdoc.pl.in
# *** Do not edit the generated file ***

# mkdoc.pl.in: generate documentation from source code and associated files.
use strict;

# Declarations
sub get_descriptions();
sub tohtml($);

# Parse command line parameters
if($#ARGV < 1 || $#ARGV>2) {
  print "usage: mkdoc.pl <source directory> <destination> [webroot]\n";
  exit 1;
}

my $srcdir  = $ARGV[0];
my $dest    = $ARGV[1];
my $webroot = "";
$webroot = $ARGV[2] if($#ARGV == 2);

my %descriptions = ();
my %classes = ();

get_descriptions();
#get_codestruct();
output_html();

sub get_descriptions() {
    # Assume we have find.  Get all the possible directories.
    my @dirs   = split(/\n/, `find $srcdir -type d`);

    # Read the contents of any dir_contents's we find.
    my $dir;
    foreach $dir (@dirs) {
	next if $dir =~ m/CVS$/;
	my $contentsfile = "$dir/dir_contents";
	next if ! -r $contentsfile;
	open(CONTENTSFILE, $contentsfile);

	my $contents = "";
	while(<CONTENTSFILE>) { $contents .= $_; }

        # Get directory tag
	if($contents !~ m#<directory>\s*(.+?)\s*</directory>#is) {
	    print STDERR "Skipping $contentsfile: didn't contain a directory tag\n";
	    next;
	}
	my $directory = "$1";
	my $tagdir = "$srcdir/$directory/";
	if($directory eq "ROOT") {
            # Special case for top level dir
	    $tagdir = "$srcdir/";
	}
	if("$tagdir" ne $dir . "/") {
	    print STDERR "Skipping $contentsfile: incorrect directory tag\n";
	    next;
	}

        # Get description tag
	if($contents !~ m#<description>\s*(.+?)\s*</description>#is) {
	    print STDERR "Skipping $contentsfile: didn't contain a description tag\n";
	    next;
	}
	$descriptions{$directory} = "$1";
    }
    close(CONTENTSFILE);
}

sub get_codestruct() {
    my @files = split(/\n/, `find $srcdir -name \*.cc -o -name \*.c -o -name \*.cpp -o -name \*.h`);

    my $file;
    foreach $file (@files) {
	open(CODEFILE, $file);
	print "$file\n";

	my $contents;
	while(<CODEFILE>) {
	    $contents .= $_;
	}

	my $commentno = 1;
	while($contents =~ m#(/\*.*?\*/)#s) {
	    print "comment: `$1'\n";
	    my $newlines = "";

	    $contents = "$`/*$newlines*/$'";
	}
	while($contents =~ s#//(.*?)\n#\n#) { print "removing $1\n"}
	while($contents) {
	    $contents =~ /\bclass\s+(\w+)\s*(?:|:\s*(.+?)\s*)/;
	    my $classname = $1;
	    my $inheritance = "";
	    $inheritance = $2 if defined $2;
	    print "$classname-$inheritance\n";
	}
    }
    close(CODEFILE);
}

sub tohtml($) {
  my $html = $_[0];
  $html =~ s#>#&gt;#g;
  $html =~ s#<#&lt;#g;
  $html =~ s#"#&quot;#g;
  $html =~ s#\n\n#\n<P>\n#g;
  return $html;
}

sub output_html() {
    # Open output
    open(DESTFILE, ">$dest");

    # Print header
    print DESTFILE <<EOF;
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<TITLE>Muscat: Code structure</TITLE>
</HEAD>
<BODY BGCOLOR="white">
This documentation was automatically generated, and corresponds to version
@VERSION@ of Muscat.
<HR>
EOF

    # Print directory index
    print DESTFILE "<H1>Directory structure index</H1>\n";
    my $level=0;
    my $dir;
    foreach $dir (sort keys(%descriptions)) {
	my $newlev = ($dir =~ tr#/##) + 1; # Count the number of /'s in $dir
	if($level == $newlev) {
	    print DESTFILE "</LI>";
	}
	while($level < $newlev) {
	    print DESTFILE "\n" . " " x ($level * 2) . "<UL>";
	    $level++;
	}
	while($level > $newlev) {
	    print DESTFILE "</LI>\n" . " " x ($level * 2 - 2) . "</UL>";
	    $level--;
	}
	print DESTFILE "\n" . " " x ($level * 2 - 1) .
	"<LI><A HREF=\"#$dir\">$dir</A>";
    }
    my $newlev=0;
    while($level > $newlev) {
	print DESTFILE "</LI>\n" . " " x ($level * 2 - 2) . "</UL>";
	$level--;
    }
    print DESTFILE "\n<HR>\n\n";

    # Print directory details
    print DESTFILE "<H1>Directory structure</H1>\n";
    foreach $dir (sort keys(%descriptions)) {
	print DESTFILE "<A NAME=\"$dir\"></A>";
	if($webroot) {
	    if($dir eq "ROOT") {
		print DESTFILE "<A HREF=\"$webroot\">";
	    } else {
		print DESTFILE "<A HREF=\"$webroot/$dir\">";
	    }
	    print DESTFILE "<H2>$dir</H2></A>\n\n";
	} else {
	    print DESTFILE "<H2>$dir</H2>\n\n";
	}
	print DESTFILE &tohtml($descriptions{$dir});
	print DESTFILE "\n\n\n";
    }

    # Print footer
    my $date = `date "+%d %B %Y"`;
    $date =~ s/\n$//;
    my $genby = `whoami`;
    $genby =~ s/\n$//;
    $genby .= '@' . `hostname`;
    $genby =~ s/\n$//;

    print DESTFILE <<EOF;
<HR>
Generated on $date.
<P>
Command line used to generate this documentation:<BR>
<CODE>$0 @ARGV</CODE>
</BODY>
</HTML>
EOF

    # Done
    close DESTFILE;
}
